import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React, { useContext } from 'react';
import getClassName from '../../helpers/getClassName';
import classNames from '../../lib/classNames';
import usePlatform from '../../hooks/usePlatform';
import Separator from '../Separator/Separator';
import { hasReactNode } from '../../lib/utils';
import Caption from '../Typography/Caption/Caption';
import withAdaptivity, { SizeType } from '../../hoc/withAdaptivity';
import ModalRootContext from '../ModalRoot/ModalRootContext';

var Group = function Group(props) {
  var header = props.header,
      description = props.description,
      className = props.className,
      children = props.children,
      separator = props.separator,
      getRootRef = props.getRootRef,
      mode = props.mode,
      sizeX = props.sizeX,
      restProps = _objectWithoutProperties(props, ["header", "description", "className", "children", "separator", "getRootRef", "mode", "sizeX"]);

  var _useContext = useContext(ModalRootContext),
      isInsideModal = _useContext.isInsideModal;

  var platform = usePlatform();
  var baseClassNames = getClassName('Group', platform);
  var computedMode = mode;

  if (!mode) {
    computedMode = sizeX === SizeType.COMPACT || isInsideModal ? 'plain' : 'card';
  }

  return /*#__PURE__*/React.createElement("section", _extends({}, restProps, {
    ref: getRootRef,
    className: classNames(className, baseClassNames, "Group--sizeX-".concat(sizeX), "Group--".concat(computedMode))
  }), /*#__PURE__*/React.createElement("div", {
    className: "Group__inner"
  }, header, children, hasReactNode(description) && /*#__PURE__*/React.createElement("div", {
    className: "Group__description"
  }, /*#__PURE__*/React.createElement(Caption, {
    weight: "regular",
    level: "1"
  }, description))), separator !== 'hide' && /*#__PURE__*/React.createElement(Separator, {
    className: classNames('Group__separator', {
      'Group__separator--force': separator === 'show'
    }),
    expanded: computedMode === 'card'
  }));
};

Group.defaultProps = {
  separator: 'auto'
};
export default withAdaptivity(Group, {
  sizeX: true
});
//# sourceMappingURL=Group.js.map