import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React from 'react';
import getClassName from '../../helpers/getClassName';
import classNames from '../../lib/classNames';
import Tappable from '../Tappable/Tappable';
import Title from '../Typography/Title/Title';
import Text from '../Typography/Text/Text';
import Subhead from '../Typography/Subhead/Subhead';
import Caption from '../Typography/Caption/Caption';
import usePlatform from '../../hooks/usePlatform';
import withAdaptivity, { SizeType } from '../../hoc/withAdaptivity';
import { Platform, VKCOM } from '../../lib/platform';

var getContent = function getContent(size, children, hasIcons, sizeY, platform) {
  switch (size) {
    case 'l':
      return sizeY === SizeType.COMPACT ? /*#__PURE__*/React.createElement(Text, {
        weight: "medium",
        className: "Button__content"
      }, children) : /*#__PURE__*/React.createElement(Title, {
        level: "3",
        weight: "medium",
        Component: "div",
        className: "Button__content"
      }, children);

    case 'm':
      return sizeY === SizeType.COMPACT ? /*#__PURE__*/React.createElement(Subhead, {
        weight: platform === VKCOM ? 'regular' : 'medium',
        className: "Button__content",
        Component: "div"
      }, children) : /*#__PURE__*/React.createElement(Text, {
        weight: "medium",
        className: "Button__content"
      }, children);

    case 's':
    default:
      if (hasIcons) {
        return /*#__PURE__*/React.createElement(Caption, {
          caps: platform !== Platform.VKCOM,
          level: platform === Platform.VKCOM ? '1' : sizeY === SizeType.COMPACT ? '3' : '2',
          weight: platform === Platform.VKCOM ? 'regular' : 'medium',
          className: classNames('Button__content', {
            'Button__content--caps': platform !== Platform.VKCOM
          })
        }, children);
      }

      return sizeY === SizeType.COMPACT ? /*#__PURE__*/React.createElement(Caption, {
        weight: platform === VKCOM ? 'regular' : 'medium',
        level: "1",
        className: "Button__content"
      }, children) : /*#__PURE__*/React.createElement(Subhead, {
        weight: "medium",
        Component: "div",
        className: "Button__content"
      }, children);
  }
};

var Button = function Button(props) {
  var _classNames;

  var platform = usePlatform();

  var className = props.className,
      size = props.size,
      mode = props.mode,
      stretched = props.stretched,
      align = props.align,
      children = props.children,
      before = props.before,
      after = props.after,
      getRootRef = props.getRootRef,
      Component = props.Component,
      sizeY = props.sizeY,
      restProps = _objectWithoutProperties(props, ["className", "size", "mode", "stretched", "align", "children", "before", "after", "getRootRef", "Component", "sizeY"]);

  var hasIcons = Boolean(before || after);
  return /*#__PURE__*/React.createElement(Tappable, _extends({}, restProps, {
    className: classNames(getClassName('Button', platform), className, "Button--sz-".concat(size), "Button--lvl-".concat(mode), "Button--aln-".concat(align), "Button--sizeY-".concat(sizeY), (_classNames = {}, _defineProperty(_classNames, 'Button--str', stretched), _defineProperty(_classNames, 'Button--with-icon', hasIcons), _classNames)),
    getRootRef: getRootRef,
    Component: restProps.href ? 'a' : Component
  }), /*#__PURE__*/React.createElement("div", {
    className: "Button__in"
  }, before && /*#__PURE__*/React.createElement("div", {
    className: "Button__before"
  }, before), children && getContent(size, children, hasIcons, sizeY, platform), after && /*#__PURE__*/React.createElement("div", {
    className: "Button__after"
  }, after)));
};

Button.defaultProps = {
  mode: 'primary',
  Component: 'button',
  align: 'center',
  size: 's',
  stretched: false,
  stopPropagation: true
};
export default withAdaptivity(Button, {
  sizeY: true
});
//# sourceMappingURL=Button.js.map