import React, { useContext, useEffect } from 'react';
import getClassName from '../../helpers/getClassName';
import classNames from '../../lib/classNames';
import { ModalRootContext } from '../ModalRoot/ModalRootContext';
import usePlatform from '../../hooks/usePlatform';
import withAdaptivity, { ViewHeight, ViewWidth } from '../../hoc/withAdaptivity';
import ModalDismissButton from '../ModalDismissButton/ModalDismissButton';

var ModalPage = function ModalPage(props) {
  var platform = usePlatform();

  var _useContext = useContext(ModalRootContext),
      updateModalHeight = _useContext.updateModalHeight;

  var children = props.children,
      className = props.className,
      header = props.header,
      viewWidth = props.viewWidth,
      viewHeight = props.viewHeight,
      onClose = props.onClose;
  useEffect(function () {
    updateModalHeight();
  }, [children]);
  var isDesktop = viewWidth >= ViewWidth.SMALL_TABLET && viewHeight >= ViewHeight.MEDIUM;
  var canShowCloseBtn = viewWidth >= ViewWidth.SMALL_TABLET;
  return /*#__PURE__*/React.createElement("div", {
    className: classNames(getClassName('ModalPage', platform), className, {
      'ModalPage--desktop': isDesktop
    })
  }, /*#__PURE__*/React.createElement("div", {
    className: "ModalPage__in-wrap"
  }, /*#__PURE__*/React.createElement("div", {
    className: "ModalPage__in"
  }, /*#__PURE__*/React.createElement("div", {
    className: "ModalPage__header"
  }, header), /*#__PURE__*/React.createElement("div", {
    className: "ModalPage__content-wrap"
  }, /*#__PURE__*/React.createElement("div", {
    className: "ModalPage__content"
  }, /*#__PURE__*/React.createElement("div", {
    className: "ModalPage__content-in"
  }, children))), canShowCloseBtn && /*#__PURE__*/React.createElement(ModalDismissButton, {
    onClick: onClose
  }))));
};

ModalPage.defaultProps = {
  settlingHeight: 75
};
export default withAdaptivity(ModalPage, {
  viewWidth: true,
  viewHeight: true
});
//# sourceMappingURL=ModalPage.js.map