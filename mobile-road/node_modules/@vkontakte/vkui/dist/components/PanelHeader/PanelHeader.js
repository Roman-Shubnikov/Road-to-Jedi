import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React, { useContext } from 'react';
import usePlatform from '../../hooks/usePlatform';
import getClassname from '../../helpers/getClassName';
import classNames from '../../lib/classNames';
import FixedLayout from '../FixedLayout/FixedLayout';
import Separator from '../Separator/Separator';
import { VKCOM } from '../../lib/platform';
import { ConfigProviderContext, WebviewType } from '../ConfigProvider/ConfigProviderContext';
import withAdaptivity, { SizeType } from '../../hoc/withAdaptivity';
import { isPrimitiveReactNode } from '../../lib/utils';
import Text from '../Typography/Text/Text';

var PanelHeaderIn = function PanelHeaderIn(_ref) {
  var children = _ref.children,
      left = _ref.left,
      right = _ref.right;

  var _useContext = useContext(ConfigProviderContext),
      webviewType = _useContext.webviewType;

  var isPrimitive = isPrimitiveReactNode(children);
  var platform = usePlatform();
  return /*#__PURE__*/React.createElement("div", {
    className: "PanelHeader__in"
  }, /*#__PURE__*/React.createElement("div", {
    className: "PanelHeader__left"
  }, left), /*#__PURE__*/React.createElement("div", {
    className: "PanelHeader__content"
  }, isPrimitive ? platform === VKCOM ? /*#__PURE__*/React.createElement(Text, {
    weight: "medium"
  }, children) : /*#__PURE__*/React.createElement("span", null, children) : children), /*#__PURE__*/React.createElement("div", {
    className: "PanelHeader__right"
  }, webviewType !== WebviewType.VKAPPS && right));
};

var PanelHeader = function PanelHeader(props) {
  var className = props.className,
      left = props.left,
      children = props.children,
      right = props.right,
      separator = props.separator,
      visor = props.visor,
      transparent = props.transparent,
      shadow = props.shadow,
      getRef = props.getRef,
      getRootRef = props.getRootRef,
      sizeX = props.sizeX,
      sizeY = props.sizeY,
      fixed = props.fixed,
      restProps = _objectWithoutProperties(props, ["className", "left", "children", "right", "separator", "visor", "transparent", "shadow", "getRef", "getRootRef", "sizeX", "sizeY", "fixed"]);

  var platform = usePlatform();

  var _useContext2 = useContext(ConfigProviderContext),
      webviewType = _useContext2.webviewType;

  var needShadow = shadow && sizeX === SizeType.REGULAR;
  var isFixed = platform === VKCOM ? false : fixed;
  return /*#__PURE__*/React.createElement("div", _extends({}, restProps, {
    className: classNames(getClassname('PanelHeader', platform), {
      'PanelHeader--trnsp': transparent,
      'PanelHeader--shadow': needShadow,
      'PanelHeader--vis': visor,
      'PanelHeader--sep': separator && visor,
      'PanelHeader--vkapps': webviewType === WebviewType.VKAPPS,
      'PanelHeader--no-left': !left,
      'PanelHeader--no-right': !right,
      'PanelHeader--fixed': isFixed
    }, "PanelHeader--sizeX-".concat(sizeX), className),
    ref: isFixed ? getRootRef : getRef
  }), isFixed ? /*#__PURE__*/React.createElement(FixedLayout, {
    className: "PanelHeader__fixed",
    vertical: "top",
    getRootRef: getRef
  }, /*#__PURE__*/React.createElement(PanelHeaderIn, props)) : /*#__PURE__*/React.createElement(PanelHeaderIn, props), separator && visor && platform !== VKCOM && /*#__PURE__*/React.createElement(Separator, {
    className: "PanelHeader__separator",
    expanded: sizeX === SizeType.REGULAR
  }));
};

PanelHeader.defaultProps = {
  separator: true,
  transparent: false,
  visor: true,
  fixed: true
};
export default withAdaptivity(PanelHeader, {
  sizeX: true,
  sizeY: true
});
//# sourceMappingURL=PanelHeader.js.map