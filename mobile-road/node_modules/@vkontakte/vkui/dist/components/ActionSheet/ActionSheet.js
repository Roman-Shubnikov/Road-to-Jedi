import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PopoutWrapper from '../PopoutWrapper/PopoutWrapper';
import { transitionEvent } from '../../lib/supportEvents';
import withPlatform from '../../hoc/withPlatform';
import withAdaptivity, { ViewWidth } from '../../hoc/withAdaptivity';
import { ANDROID, IOS, VKCOM } from '../../lib/platform';
import ActionSheetDropdownDesktop from './ActionSheetDropdownDesktop';
import ActionSheetDropdown from './ActionSheetDropdown';
import { hasReactNode } from '../../lib/utils';
import { ActionSheetContext } from './ActionSheetContext';
import Caption from '../Typography/Caption/Caption';

var ActionSheet = /*#__PURE__*/function (_Component) {
  _inherits(ActionSheet, _Component);

  var _super = _createSuper(ActionSheet);

  function ActionSheet(props) {
    var _this;

    _classCallCheck(this, ActionSheet);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "state", {
      closing: false
    });

    _defineProperty(_assertThisInitialized(_this), "elRef", void 0);

    _defineProperty(_assertThisInitialized(_this), "transitionFinishTimeout", void 0);

    _defineProperty(_assertThisInitialized(_this), "onClose", function () {
      _this.setState({
        closing: true
      });

      _this.waitTransitionFinish(_this.props.onClose);
    });

    _defineProperty(_assertThisInitialized(_this), "onItemClick", function (action, autoclose) {
      return function (event) {
        event.persist();

        if (autoclose) {
          _this.setState({
            closing: true
          });

          _this.waitTransitionFinish(function () {
            _this.props.onClose();

            action && action(event);
          });
        } else {
          action && action(event);
        }
      };
    });

    _this.elRef = /*#__PURE__*/React.createRef();
    return _this;
  }

  _createClass(ActionSheet, [{
    key: "waitTransitionFinish",
    value: function waitTransitionFinish(eventHandler) {
      if (this.props.viewWidth >= ViewWidth.TABLET) {
        eventHandler();
      }

      if (transitionEvent.supported) {
        this.elRef.current.removeEventListener(transitionEvent.name, eventHandler);
        this.elRef.current.addEventListener(transitionEvent.name, eventHandler);
      } else {
        clearTimeout(this.transitionFinishTimeout);
        this.transitionFinishTimeout = setTimeout(eventHandler, this.props.platform === ANDROID || this.props.platform === VKCOM ? 200 : 300);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          header = _this$props.header,
          text = _this$props.text,
          style = _this$props.style,
          platform = _this$props.platform,
          viewWidth = _this$props.viewWidth,
          iosCloseItem = _this$props.iosCloseItem,
          restProps = _objectWithoutProperties(_this$props, ["children", "className", "header", "text", "style", "platform", "viewWidth", "iosCloseItem"]);

      var isDesktop = viewWidth >= ViewWidth.TABLET;
      var DropdownComponent = isDesktop ? ActionSheetDropdownDesktop : ActionSheetDropdown;
      return /*#__PURE__*/React.createElement(PopoutWrapper, {
        closing: this.state.closing,
        alignY: "bottom",
        className: className,
        style: style,
        onClick: this.onClose,
        hasMask: !isDesktop,
        fixed: !isDesktop
      }, /*#__PURE__*/React.createElement(ActionSheetContext.Provider, {
        value: {
          onItemClick: this.onItemClick,
          isDesktop: isDesktop
        }
      }, /*#__PURE__*/React.createElement(DropdownComponent, _extends({
        closing: this.state.closing,
        onClose: this.onClose,
        elementRef: this.elRef
      }, restProps), (hasReactNode(header) || hasReactNode(text)) && /*#__PURE__*/React.createElement("header", {
        className: "ActionSheet__header"
      }, hasReactNode(header) && /*#__PURE__*/React.createElement(Caption, {
        level: "1",
        weight: platform === IOS ? 'semibold' : 'medium',
        className: "ActionSheet__title"
      }, header), hasReactNode(text) && /*#__PURE__*/React.createElement(Caption, {
        level: "1",
        weight: "regular",
        className: "ActionSheet__text"
      }, text)), children, platform === IOS && !isDesktop && iosCloseItem)));
    }
  }]);

  return ActionSheet;
}(Component);

export default withAdaptivity(withPlatform(ActionSheet), {
  viewWidth: true
});
//# sourceMappingURL=ActionSheet.js.map