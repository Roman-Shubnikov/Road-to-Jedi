import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React, { useEffect, useRef } from 'react';
import getClassName from '../../helpers/getClassName';
import classNames from '../../lib/classNames';
import usePlatform from '../../hooks/usePlatform';
import withAdaptivity, { ViewWidth } from '../../hoc/withAdaptivity';
import { ScrollSaver } from './ScrollSaver';
export var Epic = function Epic(props) {
  var platform = usePlatform();
  var scroll = useRef({}).current;

  var className = props.className,
      activeStory = props.activeStory,
      tabbar = props.tabbar,
      children = props.children,
      viewWidth = props.viewWidth,
      restProps = _objectWithoutProperties(props, ["className", "activeStory", "tabbar", "children", "viewWidth"]);

  useEffect(function () {
    if (!tabbar && viewWidth < ViewWidth.SMALL_TABLET) {
      console.warn('[Epic] Using Epic without tabbar is not recommended on mobile');
    }
  }, [viewWidth]);
  var story = React.Children.toArray(children).find(function (story) {
    return story.props.id === activeStory;
  });
  return /*#__PURE__*/React.createElement("div", _extends({}, restProps, {
    className: classNames(getClassName('Epic', platform), className)
  }), /*#__PURE__*/React.createElement(ScrollSaver, {
    key: activeStory,
    initialScroll: scroll[activeStory] || 0,
    saveScroll: function saveScroll(value) {
      return scroll[activeStory] = value;
    }
  }, story), tabbar);
};
export default withAdaptivity(Epic, {
  viewWidth: true
});
//# sourceMappingURL=Epic.js.map