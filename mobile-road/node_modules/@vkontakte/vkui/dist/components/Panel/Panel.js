import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import getClassName from '../../helpers/getClassName';
import classNames from '../../lib/classNames';
import Touch from '../Touch/Touch';
import withPlatform from '../../hoc/withPlatform';
import withAdaptivity from '../../hoc/withAdaptivity';
import { PanelContext } from './PanelContext';
import { IOS } from '../../lib/platform';
import { setRef } from '../../lib/utils';

var Panel = /*#__PURE__*/function (_Component) {
  _inherits(Panel, _Component);

  var _super = _createSuper(Panel);

  function Panel(props) {
    var _this;

    _classCallCheck(this, Panel);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "childContext", void 0);

    _defineProperty(_assertThisInitialized(_this), "container", void 0);

    _defineProperty(_assertThisInitialized(_this), "getRef", function (container) {
      _this.container = container;
      setRef(container, _this.props.getRootRef);
    });

    _this.childContext = {
      panel: props.id
    };
    return _this;
  }

  _createClass(Panel, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          centered = _this$props.centered,
          children = _this$props.children,
          platform = _this$props.platform,
          getRootRef = _this$props.getRootRef,
          sizeX = _this$props.sizeX,
          restProps = _objectWithoutProperties(_this$props, ["className", "centered", "children", "platform", "getRootRef", "sizeX"]);

      return /*#__PURE__*/React.createElement(PanelContext.Provider, {
        value: this.childContext
      }, /*#__PURE__*/React.createElement("div", _extends({}, restProps, {
        ref: this.getRef,
        className: classNames(getClassName('Panel', platform), className, "Panel--".concat(sizeX), _defineProperty({
          'Panel--centered': centered
        }, "Panel--sizeX-".concat(sizeX), true))
      }), /*#__PURE__*/React.createElement(Touch, {
        className: "Panel__in"
      }, platform === IOS && /*#__PURE__*/React.createElement("div", {
        className: "Panel__fade"
      }), /*#__PURE__*/React.createElement("div", {
        className: "Panel__in-before"
      }), centered ? /*#__PURE__*/React.createElement("div", {
        className: "Panel__centered"
      }, children) : children, /*#__PURE__*/React.createElement("div", {
        className: "Panel__in-after"
      }))));
    }
  }]);

  return Panel;
}(Component);

_defineProperty(Panel, "defaultProps", {
  children: '',
  centered: false
});

export default withAdaptivity(withPlatform(Panel), {
  sizeX: true
});
//# sourceMappingURL=Panel.js.map