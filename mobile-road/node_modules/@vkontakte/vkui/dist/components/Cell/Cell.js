import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import classNames from '../../lib/classNames';
import getClassName from '../../helpers/getClassName';
import IconButton from '../IconButton/IconButton';
import Touch from '../Touch/Touch';
import { ANDROID, IOS, VKCOM } from '../../lib/platform';
import { Icon24Cancel, Icon24Reorder, Icon24ReorderIos, Icon16Done } from '@vkontakte/icons';
import withPlatform from '../../hoc/withPlatform';
import SimpleCell from '../SimpleCell/SimpleCell';
import { setRef } from '../../lib/utils';

var Cell = /*#__PURE__*/function (_Component) {
  _inherits(Cell, _Component);

  var _super = _createSuper(Cell);

  function Cell(props) {
    var _this;

    _classCallCheck(this, Cell);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "rootEl", void 0);

    _defineProperty(_assertThisInitialized(_this), "removeButton", void 0);

    _defineProperty(_assertThisInitialized(_this), "onRemoveActivateClick", function (e) {
      e.nativeEvent.stopPropagation();
      e.preventDefault();

      _this.setState({
        isRemoveActivated: true
      });

      _this.document.addEventListener('click', _this.deactivateRemove);
    });

    _defineProperty(_assertThisInitialized(_this), "deactivateRemove", function () {
      _this.setState({
        isRemoveActivated: false,
        removeOffset: 0
      });

      _this.document.removeEventListener('click', _this.deactivateRemove);
    });

    _defineProperty(_assertThisInitialized(_this), "onRemoveClick", function (e) {
      e.nativeEvent.stopImmediatePropagation();
      e.preventDefault();
      _this.props.onRemove && _this.props.onRemove(e, _this.rootEl);
    });

    _defineProperty(_assertThisInitialized(_this), "getRemoveRef", function (el) {
      return _this.removeButton = el;
    });

    _defineProperty(_assertThisInitialized(_this), "getRootRef", function (element) {
      _this.rootEl = element;
      setRef(element, _this.props.getRootRef);
    });

    _defineProperty(_assertThisInitialized(_this), "dragShift", void 0);

    _defineProperty(_assertThisInitialized(_this), "listEl", void 0);

    _defineProperty(_assertThisInitialized(_this), "siblings", void 0);

    _defineProperty(_assertThisInitialized(_this), "dragStartIndex", void 0);

    _defineProperty(_assertThisInitialized(_this), "dragEndIndex", void 0);

    _defineProperty(_assertThisInitialized(_this), "dragDirection", void 0);

    _defineProperty(_assertThisInitialized(_this), "onDragStart", function () {
      _this.setState({
        dragging: true
      });

      _this.dragShift = 0;
      _this.listEl = _this.rootEl.closest('.List');
      _this.listEl && _this.listEl.classList.add('List--dragging');
      _this.siblings = Array.prototype.slice.call(_this.rootEl.parentElement.childNodes);
      _this.dragStartIndex = _this.siblings.indexOf(_this.rootEl);
    });

    _defineProperty(_assertThisInitialized(_this), "onDragMove", function (e) {
      e.originalEvent.preventDefault();

      if (_this.state.removeOffset) {
        return;
      }

      _this.rootEl.style.transform = "translateY(".concat(e.shiftY, "px)");

      var rootGesture = _this.rootEl.getBoundingClientRect();

      _this.dragDirection = _this.dragShift - e.shiftY < 0 ? 'down' : 'up';
      _this.dragShift = e.shiftY;
      _this.dragEndIndex = _this.dragStartIndex;

      _this.siblings.forEach(function (sibling, siblingIndex) {
        var siblingGesture = sibling.getBoundingClientRect();

        if (_this.dragStartIndex < siblingIndex) {
          if (rootGesture.bottom > siblingGesture.top + siblingGesture.height / 2) {
            if (_this.dragDirection === 'down') {
              sibling.style.transform = 'translateY(-100%)';
            }

            _this.dragEndIndex++;
          }

          if (rootGesture.top < siblingGesture.bottom - siblingGesture.height / 2 && _this.dragDirection === 'up') {
            sibling.style.transform = 'translateY(0)';
          }
        } else if (_this.dragStartIndex > siblingIndex) {
          if (rootGesture.top < siblingGesture.bottom - siblingGesture.height / 2) {
            if (_this.dragDirection === 'up') {
              sibling.style.transform = 'translateY(100%)';
            }

            _this.dragEndIndex--;
          }

          if (rootGesture.bottom > siblingGesture.top + siblingGesture.height / 2 && _this.dragDirection === 'down') {
            sibling.style.transform = 'translateY(0)';
          }
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onDragEnd", function () {
      _this.setState({
        dragging: false
      });

      _this.listEl && _this.listEl.classList.remove('List--dragging');
      _this.props.onDragFinish && _this.props.onDragFinish({
        from: _this.dragStartIndex,
        to: _this.dragEndIndex
      });

      _this.siblings.forEach(function (sibling) {
        return sibling.style.transform = null;
      });

      delete _this.dragShift;
      delete _this.listEl;
      delete _this.siblings;
      delete _this.dragStartIndex;
      delete _this.dragEndIndex;
      delete _this.dragDirection;
    });

    _defineProperty(_assertThisInitialized(_this), "onDragClick", function (e) {
      e.nativeEvent.stopPropagation();
      e.preventDefault();
    });

    _this.state = {
      isRemoveActivated: false,
      removeOffset: 0,
      dragging: false
    };
    return _this;
  }

  _createClass(Cell, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.document.removeEventListener('click', this.deactivateRemove);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_prevProps, prevState) {
      if (prevState.isRemoveActivated !== this.state.isRemoveActivated && this.state.isRemoveActivated) {
        this.setState({
          removeOffset: this.removeButton.offsetWidth
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          onRemove = _this$props.onRemove,
          removePlaceholder = _this$props.removePlaceholder,
          onDragFinish = _this$props.onDragFinish,
          className = _this$props.className,
          style = _this$props.style,
          getRootRef = _this$props.getRootRef,
          platform = _this$props.platform,
          before = _this$props.before,
          after = _this$props.after,
          disabled = _this$props.disabled,
          removable = _this$props.removable,
          draggable = _this$props.draggable,
          selectable = _this$props.selectable,
          Component = _this$props.Component,
          onChange = _this$props.onChange,
          name = _this$props.name,
          checked = _this$props.checked,
          defaultChecked = _this$props.defaultChecked,
          restProps = _objectWithoutProperties(_this$props, ["onRemove", "removePlaceholder", "onDragFinish", "className", "style", "getRootRef", "platform", "before", "after", "disabled", "removable", "draggable", "selectable", "Component", "onChange", "name", "checked", "defaultChecked"]);

      return /*#__PURE__*/React.createElement("div", {
        className: classNames(getClassName('Cell', platform), {
          'Cell--dragging': this.state.dragging,
          'Cell--removable': removable
        }, className),
        style: style,
        ref: this.getRootRef
      }, /*#__PURE__*/React.createElement("div", {
        className: "Cell__in",
        style: platform === IOS && removable ? {
          transform: "translateX(-".concat(this.state.removeOffset, "px)")
        } : null
      }, /*#__PURE__*/React.createElement(SimpleCell, _extends({}, restProps, {
        disabled: draggable || removable || disabled,
        Component: selectable ? 'label' : Component,
        before: /*#__PURE__*/React.createElement(Fragment, null, platform === IOS && removable && /*#__PURE__*/React.createElement("div", {
          className: "Cell__remove-marker",
          onClick: this.onRemoveActivateClick
        }), selectable && /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement("input", {
          type: "checkbox",
          className: "Cell__checkbox",
          name: name,
          onChange: onChange,
          defaultChecked: defaultChecked,
          checked: checked
        }), /*#__PURE__*/React.createElement("div", {
          className: "Cell__marker"
        }, /*#__PURE__*/React.createElement(Icon16Done, null))), (platform === ANDROID || platform === VKCOM) && draggable && /*#__PURE__*/React.createElement(Touch, {
          onStart: this.onDragStart,
          onMoveY: this.onDragMove,
          onEnd: this.onDragEnd,
          onClick: this.onDragClick,
          className: "Cell__dragger"
        }, /*#__PURE__*/React.createElement(Icon24Reorder, null)), before),
        after: /*#__PURE__*/React.createElement(Fragment, null, (platform === ANDROID || platform === VKCOM) && removable && /*#__PURE__*/React.createElement("div", {
          className: "Cell__remove-marker"
        }, /*#__PURE__*/React.createElement(IconButton, {
          icon: /*#__PURE__*/React.createElement(Icon24Cancel, null),
          onClick: this.onRemoveClick
        })), platform === IOS && draggable && /*#__PURE__*/React.createElement(Touch, {
          className: "Cell__dragger",
          onStart: this.onDragStart,
          onMoveY: this.onDragMove,
          onEnd: this.onDragEnd,
          onClick: this.onDragClick
        }, /*#__PURE__*/React.createElement(Icon24ReorderIos, null)), after)
      }))), platform === IOS && removable && /*#__PURE__*/React.createElement("div", {
        ref: this.getRemoveRef,
        className: "Cell__remove",
        onClick: this.onRemoveClick,
        style: {
          transform: "translateX(-".concat(this.state.removeOffset, "px)")
        }
      }, /*#__PURE__*/React.createElement("span", {
        className: "Cell__remove-in"
      }, removePlaceholder)));
    }
  }, {
    key: "document",
    get: function get() {
      return this.context.document || document;
    }
  }]);

  return Cell;
}(Component);

_defineProperty(Cell, "defaultProps", {
  removePlaceholder: 'Удалить'
});

_defineProperty(Cell, "contextTypes", {
  document: PropTypes.any
});

export default withPlatform(Cell);
//# sourceMappingURL=Cell.js.map