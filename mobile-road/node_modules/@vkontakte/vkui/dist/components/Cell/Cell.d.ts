import { Component, ReactNode, MouseEvent, InputHTMLAttributes } from 'react';
import PropTypes from 'prop-types';
import { TouchEvent } from '../Touch/Touch';
import { SimpleCellProps } from '../SimpleCell/SimpleCell';
import { HasPlatform } from '../../types';
export interface CellProps extends SimpleCellProps, HasPlatform, Pick<InputHTMLAttributes<HTMLInputElement>, 'name' | 'checked' | 'defaultChecked'> {
    /**
     * В режиме перетаскивания ячейка перестает быть кликабельной, то есть при клике переданный onClick вызываться не будет
     */
    draggable?: boolean;
    /**
     * В режиме перетаскивания ячейка перестает быть кликабельной, то есть при клике переданный onClick вызываться не будет
     */
    removable?: boolean;
    selectable?: boolean;
    /**
     * В режиме selectable реагирует на входящие значения пропса cheсked, как зависящий напрямую от входящего значения
     */
    checked?: boolean;
    /**
     * В режиме selectable реагирует на входящие значения пропса defaultChecked как неконтролируемый компонент
     */
    defaultChecked?: boolean;
    /**
     * Коллбэк срабатывает при клике на контрол удаления.
     */
    onRemove?(e: MouseEvent, rootEl: HTMLElement): void;
    /**
     * iOS only. Текст в выезжаеющей кнопке для удаления ячейки.
     */
    removePlaceholder?: ReactNode;
    /**
     * Коллбэк срабатывает при завершении перетаскивания.
     * **Важно:** режим перетаскивания не меняет порядок ячеек в DOM. В коллбэке есть объект с полями `from` и `to`.
     * Эти числа нужны для того, чтобы разработчик понимал, с какого индекса на какой произошел переход. В песочнице
     * есть рабочий пример с обработкой этих чисел и перерисовкой списка.
     */
    onDragFinish?({ from, to }: {
        from: number;
        to: number;
    }): void;
}
export interface CellState {
    isRemoveActivated: boolean;
    removeOffset: number;
    dragging: boolean;
    checked?: boolean;
}
declare class Cell extends Component<CellProps, CellState> {
    constructor(props: CellProps);
    rootEl: HTMLElement;
    removeButton: HTMLDivElement;
    static defaultProps: {
        removePlaceholder: string;
    };
    static contextTypes: {
        document: PropTypes.Requireable<any>;
    };
    get document(): any;
    private readonly onRemoveActivateClick;
    deactivateRemove: () => void;
    private readonly onRemoveClick;
    componentWillUnmount(): void;
    componentDidUpdate(_prevProps: CellProps, prevState: CellState): void;
    getRemoveRef: (el: HTMLDivElement) => HTMLDivElement;
    getRootRef: (element: HTMLElement) => void;
    dragShift: number;
    listEl: HTMLElement;
    siblings: HTMLElement[];
    dragStartIndex: number;
    dragEndIndex: number;
    dragDirection: 'down' | 'up';
    onDragStart: () => void;
    onDragMove: (e: TouchEvent) => void;
    onDragEnd: () => void;
    private readonly onDragClick;
    render(): JSX.Element;
}
declare const _default: typeof Cell;
export default _default;
