import React, { HTMLAttributes, RefCallback } from 'react';
import { Requireable } from 'prop-types';
import { HasPlatform, HasRootRef } from '../../types';
import { SplitColContextProps } from '../SplitCol/SplitCol';
export interface FixedLayoutProps extends HTMLAttributes<HTMLDivElement>, HasRootRef<HTMLDivElement>, HasPlatform {
    vertical?: 'top' | 'bottom';
    /**
     * Это свойство определяет, будет ли фон компонента окрашен в цвет фона контента.
     * Это часто необходимо для фиксированных кнопок в нижней части экрана.
     */
    filled?: boolean;
    /**
     * @ignore
     */
    panel?: string;
    /**
     * @ignore
     */
    splitCol?: SplitColContextProps;
}
export interface FixedLayoutState {
    position: 'absolute' | null;
    top: number;
    width: string;
}
export interface FixedLayoutContext {
    document: Requireable<{}>;
    window: Requireable<Window>;
}
declare class FixedLayout extends React.Component<FixedLayoutProps, FixedLayoutState> {
    state: FixedLayoutState;
    el: HTMLDivElement;
    static contextTypes: FixedLayoutContext;
    private onMountResizeTimeout;
    get document(): any;
    get window(): any;
    get currentPanel(): HTMLElement;
    get canTargetPanelScroll(): boolean;
    componentDidMount(): void;
    componentWillUnmount(): void;
    onViewTransitionStart: EventListener;
    onViewTransitionEnd: VoidFunction;
    doResize: () => void;
    getRef: RefCallback<HTMLDivElement>;
    render(): JSX.Element;
}
declare const _default: typeof FixedLayout;
export default _default;
