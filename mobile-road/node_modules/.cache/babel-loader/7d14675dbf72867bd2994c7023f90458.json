{"ast":null,"code":"/**\r\n * Detect.js: User-Agent Parser\r\n * https://github.com/darcyclarke/Detect.js\r\n * Dual licensed under the MIT and GPL licenses.\r\n *\r\n * @version 2.2.2\r\n * @author Darcy Clarke\r\n * @url http://darcyclarke.me\r\n * @createdat Mon Oct 26 2015 08:21:54 GMT-0200 (Horário brasileiro de verão)\r\n *\r\n * Based on UA-Parser (https://github.com/tobie/ua-parser) by Tobie Langel\r\n *\r\n * Example Usage:\r\n * var agentInfo = detect.parse(navigator.userAgent);\r\n * console.log(agentInfo.browser.family); // Chrome\r\n *\r\n */\n(function (root, undefined) {\n  // Shim Array.prototype.map if necessary\n  // Production steps of ECMA-262, Edition 5, 15.4.4.19\n  // Reference: http://es5.github.com/#x15.4.4.19\n  if (!Array.prototype.map) {\n    Array.prototype.map = function (callback, thisArg) {\n      var T, A, k;\n\n      if (this == null) {\n        throw new TypeError(\" this is null or not defined\");\n      } // 1. Let O be the result of calling ToObject passing the |this| value as the argument.\n\n\n      var O = Object(this); // 2. Let lenValue be the result of calling the Get internal method of O with the argument \"length\".\n      // 3. Let len be ToUint32(lenValue).\n\n      var len = O.length >>> 0; // 4. If IsCallable(callback) is false, throw a TypeError exception.\n      // See: http://es5.github.com/#x9.11\n\n      if (typeof callback !== \"function\") {\n        throw new TypeError(callback + \" is not a function\");\n      } // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n      if (thisArg) {\n        T = thisArg;\n      } // 6. Let A be a new array created as if by the expression new Array(len) where Array is\n      // the standard built-in constructor with that name and len is the value of len.\n\n\n      A = new Array(len); // 7. Let k be 0\n\n      k = 0; // 8. Repeat, while k < len\n\n      while (k < len) {\n        var kValue, mappedValue; // a. Let Pk be ToString(k).\n        //   This is implicit for LHS operands of the in operator\n        // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.\n        //   This step can be combined with c\n        // c. If kPresent is true, then\n\n        if (k in O) {\n          // i. Let kValue be the result of calling the Get internal method of O with argument Pk.\n          kValue = O[k]; // ii. Let mappedValue be the result of calling the Call internal method of callback\n          // with T as the this value and argument list containing kValue, k, and O.\n\n          mappedValue = callback.call(T, kValue, k, O); // iii. Call the DefineOwnProperty internal method of A with arguments\n          // Pk, Property Descriptor {Value: mappedValue, : true, Enumerable: true, Configurable: true},\n          // and false.\n          // In browsers that support Object.defineProperty, use the following:\n          // Object.defineProperty(A, Pk, { value: mappedValue, writable: true, enumerable: true, configurable: true });\n          // For best browser support, use the following:\n\n          A[k] = mappedValue;\n        } // d. Increase k by 1.\n\n\n        k++;\n      } // 9. return A\n\n\n      return A;\n    };\n  } // Detect\n\n\n  var detect = root.detect = function () {\n    // Context\n    var _this = function () {}; // Regexes\n\n\n    var regexes = {\n      browser_parsers: [{\n        regex: \"^(Opera)/(\\\\d+)\\\\.(\\\\d+) \\\\(Nintendo Wii\",\n        family_replacement: \"Wii\",\n        manufacturer: \"Nintendo\"\n      }, {\n        regex: \"(SeaMonkey|Camino)/(\\\\d+)\\\\.(\\\\d+)\\\\.?([ab]?\\\\d+[a-z]*)\",\n        family_replacement: \"Camino\",\n        other: true\n      }, {\n        regex: \"(Pale[Mm]oon)/(\\\\d+)\\\\.(\\\\d+)\\\\.?(\\\\d+)?\",\n        family_replacement: \"Pale Moon (Firefox Variant)\",\n        other: true\n      }, {\n        regex: \"(Fennec)/(\\\\d+)\\\\.(\\\\d+)\\\\.?([ab]?\\\\d+[a-z]*)\",\n        family_replacement: \"Firefox Mobile\"\n      }, {\n        regex: \"(Fennec)/(\\\\d+)\\\\.(\\\\d+)(pre)\",\n        family_replacment: \"Firefox Mobile\"\n      }, {\n        regex: \"(Fennec)/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Firefox Mobile\"\n      }, {\n        regex: \"Mobile.*(Firefox)/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Firefox Mobile\"\n      }, {\n        regex: \"(Namoroka|Shiretoko|Minefield)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+(?:pre)?)\",\n        family_replacement: \"Firefox ($1)\"\n      }, {\n        regex: \"(Firefox)/(\\\\d+)\\\\.(\\\\d+)(a\\\\d+[a-z]*)\",\n        family_replacement: \"Firefox Alpha\"\n      }, {\n        regex: \"(Firefox)/(\\\\d+)\\\\.(\\\\d+)(b\\\\d+[a-z]*)\",\n        family_replacement: \"Firefox Beta\"\n      }, {\n        regex: \"(Firefox)-(?:\\\\d+\\\\.\\\\d+)?/(\\\\d+)\\\\.(\\\\d+)(a\\\\d+[a-z]*)\",\n        family_replacement: \"Firefox Alpha\"\n      }, {\n        regex: \"(Firefox)-(?:\\\\d+\\\\.\\\\d+)?/(\\\\d+)\\\\.(\\\\d+)(b\\\\d+[a-z]*)\",\n        family_replacement: \"Firefox Beta\"\n      }, {\n        regex: \"(Namoroka|Shiretoko|Minefield)/(\\\\d+)\\\\.(\\\\d+)([ab]\\\\d+[a-z]*)?\",\n        family_replacement: \"Firefox ($1)\"\n      }, {\n        regex: \"(Firefox).*Tablet browser (\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"MicroB\",\n        tablet: true\n      }, {\n        regex: \"(MozillaDeveloperPreview)/(\\\\d+)\\\\.(\\\\d+)([ab]\\\\d+[a-z]*)?\"\n      }, {\n        regex: \"(Flock)/(\\\\d+)\\\\.(\\\\d+)(b\\\\d+?)\",\n        family_replacement: \"Flock\",\n        other: true\n      }, {\n        regex: \"(RockMelt)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Rockmelt\",\n        other: true\n      }, {\n        regex: \"(Navigator)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Netscape\"\n      }, {\n        regex: \"(Navigator)/(\\\\d+)\\\\.(\\\\d+)([ab]\\\\d+)\",\n        family_replacement: \"Netscape\"\n      }, {\n        regex: \"(Netscape6)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Netscape\"\n      }, {\n        regex: \"(MyIBrow)/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"My Internet Browser\",\n        other: true\n      }, {\n        regex: \"(Opera Tablet).*Version/(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\n        family_replacement: \"Opera Tablet\",\n        tablet: true\n      }, {\n        regex: \"(Opera)/.+Opera Mobi.+Version/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Opera Mobile\"\n      }, {\n        regex: \"Opera Mobi\",\n        family_replacement: \"Opera Mobile\"\n      }, {\n        regex: \"(Opera Mini)/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Opera Mini\"\n      }, {\n        regex: \"(Opera Mini)/att/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Opera Mini\"\n      }, {\n        regex: \"(Opera)/9.80.*Version/(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\n        family_replacement: \"Opera\"\n      }, {\n        regex: \"(OPR)/(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\n        family_replacement: \"Opera\"\n      }, {\n        regex: \"(webOSBrowser)/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"webOS\"\n      }, {\n        regex: \"(webOS)/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"webOS\"\n      }, {\n        regex: \"(wOSBrowser).+TouchPad/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"webOS TouchPad\"\n      }, {\n        regex: \"(luakit)\",\n        family_replacement: \"LuaKit\",\n        other: true\n      }, {\n        regex: \"(Lightning)/(\\\\d+)\\\\.(\\\\d+)([ab]?\\\\d+[a-z]*)\",\n        family_replacement: \"Lightning\",\n        other: true\n      }, {\n        regex: \"(Firefox)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+(?:pre)?) \\\\(Swiftfox\\\\)\",\n        family_replacement: \"Swiftfox\",\n        other: true\n      }, {\n        regex: \"(Firefox)/(\\\\d+)\\\\.(\\\\d+)([ab]\\\\d+[a-z]*)? \\\\(Swiftfox\\\\)\",\n        family_replacement: \"Swiftfox\",\n        other: true\n      }, {\n        regex: \"rekonq\",\n        family_replacement: \"Rekonq\",\n        other: true\n      }, {\n        regex: \"(conkeror|Conkeror)/(\\\\d+)\\\\.(\\\\d+)\\\\.?(\\\\d+)?\",\n        family_replacement: \"Conkeror\",\n        other: true\n      }, {\n        regex: \"(konqueror)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Konqueror\",\n        other: true\n      }, {\n        regex: \"(WeTab)-Browser\",\n        family_replacement: \"WeTab\",\n        other: true\n      }, {\n        regex: \"(Comodo_Dragon)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Comodo Dragon\",\n        other: true\n      }, {\n        regex: \"(YottaaMonitor)\",\n        family_replacement: \"Yottaa Monitor\",\n        other: true\n      }, {\n        regex: \"(Kindle)/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Kindle\"\n      }, {\n        regex: \"(Symphony) (\\\\d+).(\\\\d+)\",\n        family_replacement: \"Symphony\",\n        other: true\n      }, {\n        regex: \"Minimo\",\n        family_replacement: \"Minimo\",\n        other: true\n      }, {\n        regex: \"(Edge)/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Edge\"\n      }, {\n        regex: \"(CrMo)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Chrome Mobile\"\n      }, {\n        regex: \"(CriOS)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Chrome Mobile iOS\"\n      }, {\n        regex: \"(Chrome)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+) Mobile\",\n        family_replacement: \"Chrome Mobile\"\n      }, {\n        regex: \"(chromeframe)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Chrome Frame\"\n      }, {\n        regex: \"(UC Browser)(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"UC Browser\",\n        other: true\n      }, {\n        regex: \"(SLP Browser)/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Tizen Browser\",\n        other: true\n      }, {\n        regex: \"(Epiphany)/(\\\\d+)\\\\.(\\\\d+).(\\\\d+)\",\n        family_replacement: \"Epiphany\",\n        other: true\n      }, {\n        regex: \"(SE 2\\\\.X) MetaSr (\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Sogou Explorer\",\n        other: true\n      }, {\n        regex: \"(Pingdom.com_bot_version_)(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"PingdomBot\",\n        other: true\n      }, {\n        regex: \"(facebookexternalhit)/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"FacebookBot\"\n      }, {\n        regex: \"(Twitterbot)/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"TwitterBot\"\n      }, {\n        regex: \"(AdobeAIR|Chromium|FireWeb|Jasmine|ANTGalio|Midori|Fresco|Lobo|PaleMoon|Maxthon|Lynx|OmniWeb|Dillo|Camino|Demeter|Fluid|Fennec|Shiira|Sunrise|Chrome|Flock|Netscape|Lunascape|WebPilot|NetFront|Netfront|Konqueror|SeaMonkey|Kazehakase|Vienna|Iceape|Iceweasel|IceWeasel|Iron|K-Meleon|Sleipnir|Galeon|GranParadiso|Opera Mini|iCab|NetNewsWire|ThunderBrowse|Iron|Iris|UP\\\\.Browser|Bunjaloo|Google Earth|Raven for Mac)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\"\n      }, {\n        regex: \"(Bolt|Jasmine|IceCat|Skyfire|Midori|Maxthon|Lynx|Arora|IBrowse|Dillo|Camino|Shiira|Fennec|Phoenix|Chrome|Flock|Netscape|Lunascape|Epiphany|WebPilot|Opera Mini|Opera|NetFront|Netfront|Konqueror|Googlebot|SeaMonkey|Kazehakase|Vienna|Iceape|Iceweasel|IceWeasel|Iron|K-Meleon|Sleipnir|Galeon|GranParadiso|iCab|NetNewsWire|Iron|Space Bison|Stainless|Orca|Dolfin|BOLT|Minimo|Tizen Browser|Polaris)/(\\\\d+)\\\\.(\\\\d+)\"\n      }, {\n        regex: \"(iRider|Crazy Browser|SkipStone|iCab|Lunascape|Sleipnir|Maemo Browser) (\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\"\n      }, {\n        regex: \"(iCab|Lunascape|Opera|Android|Jasmine|Polaris|BREW) (\\\\d+)\\\\.(\\\\d+)\\\\.?(\\\\d+)?\"\n      }, {\n        regex: \"(Android) Donut\",\n        v2_replacement: \"2\",\n        v1_replacement: \"1\"\n      }, {\n        regex: \"(Android) Eclair\",\n        v2_replacement: \"1\",\n        v1_replacement: \"2\"\n      }, {\n        regex: \"(Android) Froyo\",\n        v2_replacement: \"2\",\n        v1_replacement: \"2\"\n      }, {\n        regex: \"(Android) Gingerbread\",\n        v2_replacement: \"3\",\n        v1_replacement: \"2\"\n      }, {\n        regex: \"(Android) Honeycomb\",\n        v1_replacement: \"3\"\n      }, {\n        regex: \"(IEMobile)[ /](\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"IE Mobile\"\n      }, {\n        regex: \"(MSIE) (\\\\d+)\\\\.(\\\\d+).*XBLWP7\",\n        family_replacement: \"IE Large Screen\"\n      }, {\n        regex: \"(Firefox)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\"\n      }, {\n        regex: \"(Firefox)/(\\\\d+)\\\\.(\\\\d+)(pre|[ab]\\\\d+[a-z]*)?\"\n      }, {\n        regex: \"(Obigo)InternetBrowser\",\n        other: true\n      }, {\n        regex: \"(Obigo)\\\\-Browser\",\n        other: true\n      }, {\n        regex: \"(Obigo|OBIGO)[^\\\\d]*(\\\\d+)(?:.(\\\\d+))?\",\n        other: true\n      }, {\n        regex: \"(MAXTHON|Maxthon) (\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Maxthon\",\n        other: true\n      }, {\n        regex: \"(Maxthon|MyIE2|Uzbl|Shiira)\",\n        v1_replacement: \"0\",\n        other: true\n      }, {\n        regex: \"(PLAYSTATION) (\\\\d+)\",\n        family_replacement: \"PlayStation\",\n        manufacturer: \"Sony\"\n      }, {\n        regex: \"(PlayStation Portable)[^\\\\d]+(\\\\d+).(\\\\d+)\",\n        manufacturer: \"Sony\"\n      }, {\n        regex: \"(BrowseX) \\\\((\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        other: true\n      }, {\n        regex: \"(POLARIS)/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Polaris\",\n        other: true\n      }, {\n        regex: \"(Embider)/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Polaris\",\n        other: true\n      }, {\n        regex: \"(BonEcho)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Bon Echo\",\n        other: true\n      }, {\n        regex: \"(iPod).+Version/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Mobile Safari\",\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(iPod).*Version/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Mobile Safari\",\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(iPod)\",\n        family_replacement: \"Mobile Safari\",\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(iPhone).*Version/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Mobile Safari\",\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(iPhone).*Version/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Mobile Safari\",\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(iPhone)\",\n        family_replacement: \"Mobile Safari\",\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(iPad).*Version/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Mobile Safari\",\n        tablet: true,\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(iPad).*Version/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Mobile Safari\",\n        tablet: true,\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(iPad)\",\n        family_replacement: \"Mobile Safari\",\n        tablet: true,\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(AvantGo) (\\\\d+).(\\\\d+)\",\n        other: true\n      }, {\n        regex: \"(Avant)\",\n        v1_replacement: \"1\",\n        other: true\n      }, {\n        regex: \"^(Nokia)\",\n        family_replacement: \"Nokia Services (WAP) Browser\",\n        manufacturer: \"Nokia\"\n      }, {\n        regex: \"(NokiaBrowser)/(\\\\d+)\\\\.(\\\\d+).(\\\\d+)\\\\.(\\\\d+)\",\n        manufacturer: \"Nokia\"\n      }, {\n        regex: \"(NokiaBrowser)/(\\\\d+)\\\\.(\\\\d+).(\\\\d+)\",\n        manufacturer: \"Nokia\"\n      }, {\n        regex: \"(NokiaBrowser)/(\\\\d+)\\\\.(\\\\d+)\",\n        manufacturer: \"Nokia\"\n      }, {\n        regex: \"(BrowserNG)/(\\\\d+)\\\\.(\\\\d+).(\\\\d+)\",\n        family_replacement: \"NokiaBrowser\",\n        manufacturer: \"Nokia\"\n      }, {\n        regex: \"(Series60)/5\\\\.0\",\n        v2_replacement: \"0\",\n        v1_replacement: \"7\",\n        family_replacement: \"NokiaBrowser\",\n        manufacturer: \"Nokia\"\n      }, {\n        regex: \"(Series60)/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Nokia OSS Browser\",\n        manufacturer: \"Nokia\"\n      }, {\n        regex: \"(S40OviBrowser)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Nokia Series 40 Ovi Browser\",\n        manufacturer: \"Nokia\"\n      }, {\n        regex: \"(Nokia)[EN]?(\\\\d+)\",\n        manufacturer: \"Nokia\"\n      }, {\n        regex: \"(PlayBook).+RIM Tablet OS (\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Blackberry WebKit\",\n        tablet: true,\n        manufacturer: \"Nokia\"\n      }, {\n        regex: \"(Black[bB]erry).+Version/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Blackberry WebKit\",\n        manufacturer: \"RIM\"\n      }, {\n        regex: \"(Black[bB]erry)\\\\s?(\\\\d+)\",\n        family_replacement: \"Blackberry\",\n        manufacturer: \"RIM\"\n      }, {\n        regex: \"(OmniWeb)/v(\\\\d+)\\\\.(\\\\d+)\",\n        other: true\n      }, {\n        regex: \"(Blazer)/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Palm Blazer\",\n        manufacturer: \"Palm\"\n      }, {\n        regex: \"(Pre)/(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"Palm Pre\",\n        manufacturer: \"Palm\"\n      }, {\n        regex: \"(Links) \\\\((\\\\d+)\\\\.(\\\\d+)\",\n        other: true\n      }, {\n        regex: \"(QtWeb) Internet Browser/(\\\\d+)\\\\.(\\\\d+)\",\n        other: true\n      }, {\n        regex: \"(Silk)/(\\\\d+)\\\\.(\\\\d+)(?:\\\\.([0-9\\\\-]+))?\",\n        other: true,\n        tablet: true\n      }, {\n        regex: \"(AppleWebKit)/(\\\\d+)\\\\.?(\\\\d+)?\\\\+ .* Version/\\\\d+\\\\.\\\\d+.\\\\d+ Safari/\",\n        family_replacement: \"WebKit Nightly\"\n      }, {\n        regex: \"(Version)/(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?.*Safari/\",\n        family_replacement: \"Safari\"\n      }, {\n        regex: \"(Safari)/\\\\d+\"\n      }, {\n        regex: \"(OLPC)/Update(\\\\d+)\\\\.(\\\\d+)\",\n        other: true\n      }, {\n        regex: \"(OLPC)/Update()\\\\.(\\\\d+)\",\n        v1_replacement: \"0\",\n        other: true\n      }, {\n        regex: \"(SEMC\\\\-Browser)/(\\\\d+)\\\\.(\\\\d+)\",\n        other: true\n      }, {\n        regex: \"(Teleca)\",\n        family_replacement: \"Teleca Browser\",\n        other: true\n      }, {\n        regex: \"Trident(.*)rv.(\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"IE\"\n      }, {\n        regex: \"(MSIE) (\\\\d+)\\\\.(\\\\d+)\",\n        family_replacement: \"IE\"\n      }],\n      os_parsers: [{\n        regex: \"(Android) (\\\\d+)\\\\.(\\\\d+)(?:[.\\\\-]([a-z0-9]+))?\"\n      }, {\n        regex: \"(Android)\\\\-(\\\\d+)\\\\.(\\\\d+)(?:[.\\\\-]([a-z0-9]+))?\"\n      }, {\n        regex: \"(Android) Donut\",\n        os_v2_replacement: \"2\",\n        os_v1_replacement: \"1\"\n      }, {\n        regex: \"(Android) Eclair\",\n        os_v2_replacement: \"1\",\n        os_v1_replacement: \"2\"\n      }, {\n        regex: \"(Android) Froyo\",\n        os_v2_replacement: \"2\",\n        os_v1_replacement: \"2\"\n      }, {\n        regex: \"(Android) Gingerbread\",\n        os_v2_replacement: \"3\",\n        os_v1_replacement: \"2\"\n      }, {\n        regex: \"(Android) Honeycomb\",\n        os_v1_replacement: \"3\"\n      }, {\n        regex: \"(Silk-Accelerated=[a-z]{4,5})\",\n        os_replacement: \"Android\"\n      }, {\n        regex: \"(Windows Phone 6\\\\.5)\"\n      }, {\n        regex: \"(Windows (?:NT 5\\\\.2|NT 5\\\\.1))\",\n        os_replacement: \"Windows XP\"\n      }, {\n        regex: \"(XBLWP7)\",\n        os_replacement: \"Windows Phone OS\"\n      }, {\n        regex: \"(Windows NT 6\\\\.1)\",\n        os_replacement: \"Windows 7\"\n      }, {\n        regex: \"(Windows NT 6\\\\.0)\",\n        os_replacement: \"Windows Vista\"\n      }, {\n        regex: \"(Windows 98|Windows XP|Windows ME|Windows 95|Windows CE|Windows 7|Windows NT 4\\\\.0|Windows Vista|Windows 2000)\"\n      }, {\n        regex: \"(Windows NT 6\\\\.4|Windows NT 10\\\\.0)\",\n        os_replacement: \"Windows 10\"\n      }, {\n        regex: \"(Windows NT 6\\\\.2)\",\n        os_replacement: \"Windows 8\"\n      }, {\n        regex: \"(Windows Phone 8)\",\n        os_replacement: \"Windows Phone 8\"\n      }, {\n        regex: \"(Windows NT 5\\\\.0)\",\n        os_replacement: \"Windows 2000\"\n      }, {\n        regex: \"(Windows Phone OS) (\\\\d+)\\\\.(\\\\d+)\"\n      }, {\n        regex: \"(Windows ?Mobile)\",\n        os_replacement: \"Windows Mobile\"\n      }, {\n        regex: \"(WinNT4.0)\",\n        os_replacement: \"Windows NT 4.0\"\n      }, {\n        regex: \"(Win98)\",\n        os_replacement: \"Windows 98\"\n      }, {\n        regex: \"(Tizen)/(\\\\d+)\\\\.(\\\\d+)\",\n        other: true\n      }, {\n        regex: \"(Mac OS X) (\\\\d+)[_.](\\\\d+)(?:[_.](\\\\d+))?\",\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(?:PPC|Intel) (Mac OS X)\",\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(CPU OS|iPhone OS) (\\\\d+)_(\\\\d+)(?:_(\\\\d+))?\",\n        os_replacement: \"iOS\",\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(iPhone|iPad|iPod); Opera\",\n        os_replacement: \"iOS\",\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(iPad); Opera\",\n        tablet: true,\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(iPhone|iPad|iPod).*Mac OS X.*Version/(\\\\d+)\\\\.(\\\\d+)\",\n        os_replacement: \"iOS\",\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(CrOS) [a-z0-9_]+ (\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\n        os_replacement: \"Chrome OS\"\n      }, {\n        regex: \"(Debian)-(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\n        other: true\n      }, {\n        regex: \"(Linux Mint)(?:/(\\\\d+))?\",\n        other: true\n      }, {\n        regex: \"(Mandriva)(?: Linux)?/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\n        other: true\n      }, {\n        regex: \"(Symbian[Oo][Ss])/(\\\\d+)\\\\.(\\\\d+)\",\n        os_replacement: \"Symbian OS\"\n      }, {\n        regex: \"(Symbian/3).+NokiaBrowser/7\\\\.3\",\n        os_replacement: \"Symbian^3 Anna\"\n      }, {\n        regex: \"(Symbian/3).+NokiaBrowser/7\\\\.4\",\n        os_replacement: \"Symbian^3 Belle\"\n      }, {\n        regex: \"(Symbian/3)\",\n        os_replacement: \"Symbian^3\"\n      }, {\n        regex: \"(Series 60|SymbOS|S60)\",\n        os_replacement: \"Symbian OS\"\n      }, {\n        regex: \"(MeeGo)\",\n        other: true\n      }, {\n        regex: \"Symbian [Oo][Ss]\",\n        os_replacement: \"Symbian OS\"\n      }, {\n        regex: \"(Black[Bb]erry)[0-9a-z]+/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\n        os_replacement: \"BlackBerry OS\",\n        manufacturer: \"RIM\"\n      }, {\n        regex: \"(Black[Bb]erry).+Version/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\n        os_replacement: \"BlackBerry OS\",\n        manufacturer: \"RIM\"\n      }, {\n        regex: \"(RIM Tablet OS) (\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        os_replacement: \"BlackBerry Tablet OS\",\n        tablet: true,\n        manufacturer: \"RIM\"\n      }, {\n        regex: \"(Play[Bb]ook)\",\n        os_replacement: \"BlackBerry Tablet OS\",\n        tablet: true,\n        manufacturer: \"RIM\"\n      }, {\n        regex: \"(Black[Bb]erry)\",\n        os_replacement: \"Blackberry OS\",\n        manufacturer: \"RIM\"\n      }, {\n        regex: \"(webOS|hpwOS)/(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\n        os_replacement: \"webOS\"\n      }, {\n        regex: \"(SUSE|Fedora|Red Hat|PCLinuxOS)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        other: true\n      }, {\n        regex: \"(SUSE|Fedora|Red Hat|Puppy|PCLinuxOS|CentOS)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\n        other: true\n      }, {\n        regex: \"(Ubuntu|Kindle|Bada|Lubuntu|BackTrack|Red Hat|Slackware)/(\\\\d+)\\\\.(\\\\d+)\"\n      }, {\n        regex: \"(Windows|OpenBSD|FreeBSD|NetBSD|Ubuntu|Kubuntu|Android|Arch Linux|CentOS|WeTab|Slackware)\"\n      }, {\n        regex: \"(Linux|BSD)\",\n        other: true\n      }],\n      mobile_os_families: [\"Windows Phone 6.5\", \"Windows CE\", \"Symbian OS\"],\n      device_parsers: [{\n        regex: \"HTC ([A-Z][a-z0-9]+) Build\",\n        device_replacement: \"HTC $1\",\n        manufacturer: \"HTC\"\n      }, {\n        regex: \"HTC ([A-Z][a-z0-9 ]+) \\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\",\n        device_replacement: \"HTC $1\",\n        manufacturer: \"HTC\"\n      }, {\n        regex: \"HTC_Touch_([A-Za-z0-9]+)\",\n        device_replacement: \"HTC Touch ($1)\",\n        manufacturer: \"HTC\"\n      }, {\n        regex: \"USCCHTC(\\\\d+)\",\n        device_replacement: \"HTC $1 (US Cellular)\",\n        manufacturer: \"HTC\"\n      }, {\n        regex: \"Sprint APA(9292)\",\n        device_replacement: \"HTC $1 (Sprint)\",\n        manufacturer: \"HTC\"\n      }, {\n        regex: \"HTC ([A-Za-z0-9]+ [A-Z])\",\n        device_replacement: \"HTC $1\",\n        manufacturer: \"HTC\"\n      }, {\n        regex: \"HTC-([A-Za-z0-9]+)\",\n        device_replacement: \"HTC $1\",\n        manufacturer: \"HTC\"\n      }, {\n        regex: \"HTC_([A-Za-z0-9]+)\",\n        device_replacement: \"HTC $1\",\n        manufacturer: \"HTC\"\n      }, {\n        regex: \"HTC ([A-Za-z0-9]+)\",\n        device_replacement: \"HTC $1\",\n        manufacturer: \"HTC\"\n      }, {\n        regex: \"(ADR[A-Za-z0-9]+)\",\n        device_replacement: \"HTC $1\",\n        manufacturer: \"HTC\"\n      }, {\n        regex: \"(HTC)\",\n        manufacturer: \"HTC\"\n      }, {\n        regex: \"SonyEricsson([A-Za-z0-9]+)/\",\n        device_replacement: \"Ericsson $1\",\n        other: true,\n        manufacturer: \"Sony\"\n      }, {\n        regex: \"Android[\\\\- ][\\\\d]+\\\\.[\\\\d]+\\\\; [A-Za-z]{2}\\\\-[A-Za-z]{2}\\\\; WOWMobile (.+) Build\"\n      }, {\n        regex: \"Android[\\\\- ][\\\\d]+\\\\.[\\\\d]+\\\\.[\\\\d]+; [A-Za-z]{2}\\\\-[A-Za-z]{2}\\\\; (.+) Build\"\n      }, {\n        regex: \"Android[\\\\- ][\\\\d]+\\\\.[\\\\d]+\\\\-update1\\\\; [A-Za-z]{2}\\\\-[A-Za-z]{2}\\\\; (.+) Build\"\n      }, {\n        regex: \"Android[\\\\- ][\\\\d]+\\\\.[\\\\d]+\\\\; [A-Za-z]{2}\\\\-[A-Za-z]{2}\\\\; (.+) Build\"\n      }, {\n        regex: \"Android[\\\\- ][\\\\d]+\\\\.[\\\\d]+\\\\.[\\\\d]+; (.+) Build\"\n      }, {\n        regex: \"NokiaN([0-9]+)\",\n        device_replacement: \"Nokia N$1\",\n        manufacturer: \"Nokia\"\n      }, {\n        regex: \"Nokia([A-Za-z0-9\\\\v-]+)\",\n        device_replacement: \"Nokia $1\",\n        manufacturer: \"Nokia\"\n      }, {\n        regex: \"NOKIA ([A-Za-z0-9\\\\-]+)\",\n        device_replacement: \"Nokia $1\",\n        manufacturer: \"Nokia\"\n      }, {\n        regex: \"Nokia ([A-Za-z0-9\\\\-]+)\",\n        device_replacement: \"Nokia $1\",\n        manufacturer: \"Nokia\"\n      }, {\n        regex: \"Lumia ([A-Za-z0-9\\\\-]+)\",\n        device_replacement: \"Lumia $1\",\n        manufacturer: \"Nokia\"\n      }, {\n        regex: \"Symbian\",\n        device_replacement: \"Nokia\",\n        manufacturer: \"Nokia\"\n      }, {\n        regex: \"(PlayBook).+RIM Tablet OS\",\n        device_replacement: \"Blackberry Playbook\",\n        tablet: true,\n        manufacturer: \"RIM\"\n      }, {\n        regex: \"(Black[Bb]erry [0-9]+);\",\n        manufacturer: \"RIM\"\n      }, {\n        regex: \"Black[Bb]erry([0-9]+)\",\n        device_replacement: \"BlackBerry $1\",\n        manufacturer: \"RIM\"\n      }, {\n        regex: \"(Pre)/(\\\\d+)\\\\.(\\\\d+)\",\n        device_replacement: \"Palm Pre\",\n        manufacturer: \"Palm\"\n      }, {\n        regex: \"(Pixi)/(\\\\d+)\\\\.(\\\\d+)\",\n        device_replacement: \"Palm Pixi\",\n        manufacturer: \"Palm\"\n      }, {\n        regex: \"(Touchpad)/(\\\\d+)\\\\.(\\\\d+)\",\n        device_replacement: \"HP Touchpad\",\n        manufacturer: \"HP\"\n      }, {\n        regex: \"HPiPAQ([A-Za-z0-9]+)/(\\\\d+).(\\\\d+)\",\n        device_replacement: \"HP iPAQ $1\",\n        manufacturer: \"HP\"\n      }, {\n        regex: \"Palm([A-Za-z0-9]+)\",\n        device_replacement: \"Palm $1\",\n        manufacturer: \"Palm\"\n      }, {\n        regex: \"Treo([A-Za-z0-9]+)\",\n        device_replacement: \"Palm Treo $1\",\n        manufacturer: \"Palm\"\n      }, {\n        regex: \"webOS.*(P160UNA)/(\\\\d+).(\\\\d+)\",\n        device_replacement: \"HP Veer\",\n        manufacturer: \"HP\"\n      }, {\n        regex: \"(Kindle Fire)\",\n        manufacturer: \"Amazon\"\n      }, {\n        regex: \"(Kindle)\",\n        manufacturer: \"Amazon\"\n      }, {\n        regex: \"(Silk)/(\\\\d+)\\\\.(\\\\d+)(?:\\\\.([0-9\\\\-]+))?\",\n        device_replacement: \"Kindle Fire\",\n        tablet: true,\n        manufacturer: \"Amazon\"\n      }, {\n        regex: \"(iPad) Simulator;\",\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(iPad);\",\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(iPod);\",\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(iPhone) Simulator;\",\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"(iPhone);\",\n        manufacturer: \"Apple\"\n      }, {\n        regex: \"Nexus\\\\ ([A-Za-z0-9\\\\-]+)\",\n        device_replacement: \"Nexus $1\"\n      }, {\n        regex: \"acer_([A-Za-z0-9]+)_\",\n        device_replacement: \"Acer $1\",\n        manufacturer: \"Acer\"\n      }, {\n        regex: \"acer_([A-Za-z0-9]+)_\",\n        device_replacement: \"Acer $1\",\n        manufacturer: \"Acer\"\n      }, {\n        regex: \"Amoi\\\\-([A-Za-z0-9]+)\",\n        device_replacement: \"Amoi $1\",\n        other: true,\n        manufacturer: \"Amoi\"\n      }, {\n        regex: \"AMOI\\\\-([A-Za-z0-9]+)\",\n        device_replacement: \"Amoi $1\",\n        other: true,\n        manufacturer: \"Amoi\"\n      }, {\n        regex: \"Asus\\\\-([A-Za-z0-9]+)\",\n        device_replacement: \"Asus $1\",\n        manufacturer: \"Asus\"\n      }, {\n        regex: \"ASUS\\\\-([A-Za-z0-9]+)\",\n        device_replacement: \"Asus $1\",\n        manufacturer: \"Asus\"\n      }, {\n        regex: \"BIRD\\\\-([A-Za-z0-9]+)\",\n        device_replacement: \"Bird $1\",\n        other: true\n      }, {\n        regex: \"BIRD\\\\.([A-Za-z0-9]+)\",\n        device_replacement: \"Bird $1\",\n        other: true\n      }, {\n        regex: \"BIRD ([A-Za-z0-9]+)\",\n        device_replacement: \"Bird $1\",\n        other: true\n      }, {\n        regex: \"Dell ([A-Za-z0-9]+)\",\n        device_replacement: \"Dell $1\",\n        manufacturer: \"Dell\"\n      }, {\n        regex: \"DoCoMo/2\\\\.0 ([A-Za-z0-9]+)\",\n        device_replacement: \"DoCoMo $1\",\n        other: true\n      }, {\n        regex: \"([A-Za-z0-9]+)\\\\_W\\\\;FOMA\",\n        device_replacement: \"DoCoMo $1\",\n        other: true\n      }, {\n        regex: \"([A-Za-z0-9]+)\\\\;FOMA\",\n        device_replacement: \"DoCoMo $1\",\n        other: true\n      }, {\n        regex: \"vodafone([A-Za-z0-9]+)\",\n        device_replacement: \"Huawei Vodafone $1\",\n        other: true\n      }, {\n        regex: \"i\\\\-mate ([A-Za-z0-9]+)\",\n        device_replacement: \"i-mate $1\",\n        other: true\n      }, {\n        regex: \"Kyocera\\\\-([A-Za-z0-9]+)\",\n        device_replacement: \"Kyocera $1\",\n        other: true\n      }, {\n        regex: \"KWC\\\\-([A-Za-z0-9]+)\",\n        device_replacement: \"Kyocera $1\",\n        other: true\n      }, {\n        regex: \"Lenovo\\\\-([A-Za-z0-9]+)\",\n        device_replacement: \"Lenovo $1\",\n        manufacturer: \"Lenovo\"\n      }, {\n        regex: \"Lenovo\\\\_([A-Za-z0-9]+)\",\n        device_replacement: \"Lenovo $1\",\n        manufacturer: \"Levovo\"\n      }, {\n        regex: \"LG/([A-Za-z0-9]+)\",\n        device_replacement: \"LG $1\",\n        manufacturer: \"LG\"\n      }, {\n        regex: \"LG-LG([A-Za-z0-9]+)\",\n        device_replacement: \"LG $1\",\n        manufacturer: \"LG\"\n      }, {\n        regex: \"LGE-LG([A-Za-z0-9]+)\",\n        device_replacement: \"LG $1\",\n        manufacturer: \"LG\"\n      }, {\n        regex: \"LGE VX([A-Za-z0-9]+)\",\n        device_replacement: \"LG $1\",\n        manufacturer: \"LG\"\n      }, {\n        regex: \"LG ([A-Za-z0-9]+)\",\n        device_replacement: \"LG $1\",\n        manufacturer: \"LG\"\n      }, {\n        regex: \"LGE LG\\\\-AX([A-Za-z0-9]+)\",\n        device_replacement: \"LG $1\",\n        manufacturer: \"LG\"\n      }, {\n        regex: \"LG\\\\-([A-Za-z0-9]+)\",\n        device_replacement: \"LG $1\",\n        manufacturer: \"LG\"\n      }, {\n        regex: \"LGE\\\\-([A-Za-z0-9]+)\",\n        device_replacement: \"LG $1\",\n        manufacturer: \"LG\"\n      }, {\n        regex: \"LG([A-Za-z0-9]+)\",\n        device_replacement: \"LG $1\",\n        manufacturer: \"LG\"\n      }, {\n        regex: \"(KIN)\\\\.One (\\\\d+)\\\\.(\\\\d+)\",\n        device_replacement: \"Microsoft $1\"\n      }, {\n        regex: \"(KIN)\\\\.Two (\\\\d+)\\\\.(\\\\d+)\",\n        device_replacement: \"Microsoft $1\"\n      }, {\n        regex: \"(Motorola)\\\\-([A-Za-z0-9]+)\",\n        manufacturer: \"Motorola\"\n      }, {\n        regex: \"MOTO\\\\-([A-Za-z0-9]+)\",\n        device_replacement: \"Motorola $1\",\n        manufacturer: \"Motorola\"\n      }, {\n        regex: \"MOT\\\\-([A-Za-z0-9]+)\",\n        device_replacement: \"Motorola $1\",\n        manufacturer: \"Motorola\"\n      }, {\n        regex: \"Philips([A-Za-z0-9]+)\",\n        device_replacement: \"Philips $1\",\n        manufacturer: \"Philips\"\n      }, {\n        regex: \"Philips ([A-Za-z0-9]+)\",\n        device_replacement: \"Philips $1\",\n        manufacturer: \"Philips\"\n      }, {\n        regex: \"SAMSUNG-([A-Za-z0-9\\\\-]+)\",\n        device_replacement: \"Samsung $1\",\n        manufacturer: \"Samsung\"\n      }, {\n        regex: \"SAMSUNG\\\\; ([A-Za-z0-9\\\\-]+)\",\n        device_replacement: \"Samsung $1\",\n        manufacturer: \"Samsung\"\n      }, {\n        regex: \"Softbank/1\\\\.0/([A-Za-z0-9]+)\",\n        device_replacement: \"Softbank $1\",\n        other: true\n      }, {\n        regex: \"Softbank/2\\\\.0/([A-Za-z0-9]+)\",\n        device_replacement: \"Softbank $1\",\n        other: true\n      }, {\n        regex: \"(hiptop|avantgo|plucker|xiino|blazer|elaine|up.browser|up.link|mmp|smartphone|midp|wap|vodafone|o2|pocket|mobile|pda)\",\n        device_replacement: \"Generic Smartphone\"\n      }, {\n        regex: \"^(1207|3gso|4thp|501i|502i|503i|504i|505i|506i|6310|6590|770s|802s|a wa|acer|acs\\\\-|airn|alav|asus|attw|au\\\\-m|aur |aus |abac|acoo|aiko|alco|alca|amoi|anex|anny|anyw|aptu|arch|argo|bell|bird|bw\\\\-n|bw\\\\-u|beck|benq|bilb|blac|c55/|cdm\\\\-|chtm|capi|comp|cond|craw|dall|dbte|dc\\\\-s|dica|ds\\\\-d|ds12|dait|devi|dmob|doco|dopo|el49|erk0|esl8|ez40|ez60|ez70|ezos|ezze|elai|emul|eric|ezwa|fake|fly\\\\-|fly\\\\_|g\\\\-mo|g1 u|g560|gf\\\\-5|grun|gene|go.w|good|grad|hcit|hd\\\\-m|hd\\\\-p|hd\\\\-t|hei\\\\-|hp i|hpip|hs\\\\-c|htc |htc\\\\-|htca|htcg)\",\n        device_replacement: \"Generic Feature Phone\"\n      }, {\n        regex: \"^(htcp|htcs|htct|htc\\\\_|haie|hita|huaw|hutc|i\\\\-20|i\\\\-go|i\\\\-ma|i230|iac|iac\\\\-|iac/|ig01|im1k|inno|iris|jata|java|kddi|kgt|kgt/|kpt |kwc\\\\-|klon|lexi|lg g|lg\\\\-a|lg\\\\-b|lg\\\\-c|lg\\\\-d|lg\\\\-f|lg\\\\-g|lg\\\\-k|lg\\\\-l|lg\\\\-m|lg\\\\-o|lg\\\\-p|lg\\\\-s|lg\\\\-t|lg\\\\-u|lg\\\\-w|lg/k|lg/l|lg/u|lg50|lg54|lge\\\\-|lge/|lynx|leno|m1\\\\-w|m3ga|m50/|maui|mc01|mc21|mcca|medi|meri|mio8|mioa|mo01|mo02|mode|modo|mot |mot\\\\-|mt50|mtp1|mtv |mate|maxo|merc|mits|mobi|motv|mozz|n100|n101|n102|n202|n203|n300|n302|n500|n502|n505|n700|n701|n710|nec\\\\-|nem\\\\-|newg|neon)\",\n        device_replacement: \"Generic Feature Phone\"\n      }, {\n        regex: \"^(netf|noki|nzph|o2 x|o2\\\\-x|opwv|owg1|opti|oran|ot\\\\-s|p800|pand|pg\\\\-1|pg\\\\-2|pg\\\\-3|pg\\\\-6|pg\\\\-8|pg\\\\-c|pg13|phil|pn\\\\-2|pt\\\\-g|palm|pana|pire|pock|pose|psio|qa\\\\-a|qc\\\\-2|qc\\\\-3|qc\\\\-5|qc\\\\-7|qc07|qc12|qc21|qc32|qc60|qci\\\\-|qwap|qtek|r380|r600|raks|rim9|rove|s55/|sage|sams|sc01|sch\\\\-|scp\\\\-|sdk/|se47|sec\\\\-|sec0|sec1|semc|sgh\\\\-|shar|sie\\\\-|sk\\\\-0|sl45|slid|smb3|smt5|sp01|sph\\\\-|spv |spv\\\\-|sy01|samm|sany|sava|scoo|send|siem|smar|smit|soft|sony|t\\\\-mo|t218|t250|t600|t610|t618|tcl\\\\-|tdg\\\\-|telm|tim\\\\-|ts70|tsm\\\\-|tsm3|tsm5|tx\\\\-9|tagt)\",\n        device_replacement: \"Generic Feature Phone\"\n      }, {\n        regex: \"^(talk|teli|topl|tosh|up.b|upg1|utst|v400|v750|veri|vk\\\\-v|vk40|vk50|vk52|vk53|vm40|vx98|virg|vite|voda|vulc|w3c |w3c\\\\-|wapj|wapp|wapu|wapm|wig |wapi|wapr|wapv|wapy|wapa|waps|wapt|winc|winw|wonu|x700|xda2|xdag|yas\\\\-|your|zte\\\\-|zeto|aste|audi|avan|blaz|brew|brvw|bumb|ccwa|cell|cldc|cmd\\\\-|dang|eml2|fetc|hipt|http|ibro|idea|ikom|ipaq|jbro|jemu|jigs|keji|kyoc|kyok|libw|m\\\\-cr|midp|mmef|moto|mwbp|mywa|newt|nok6|o2im|pant|pdxg|play|pluc|port|prox|rozo|sama|seri|smal|symb|treo|upsi|vx52|vx53|vx60|vx61|vx70|vx80|vx81|vx83|vx85|wap\\\\-|webc|whit|wmlb|xda\\\\-|xda\\\\_)\",\n        device_replacement: \"Generic Feature Phone\"\n      }, {\n        regex: \"(bot|borg|google(^tv)|yahoo|slurp|msnbot|msrbot|openbot|archiver|netresearch|lycos|scooter|altavista|teoma|gigabot|baiduspider|blitzbot|oegp|charlotte|furlbot|http%20client|polybot|htdig|ichiro|mogimogi|larbin|pompos|scrubby|searchsight|seekbot|semanticdiscovery|silk|snappy|speedy|spider|voila|vortex|voyager|zao|zeal|fast\\\\-webcrawler|converacrawler|dataparksearch|findlinks)\",\n        device_replacement: \"Spider\"\n      }],\n      mobile_browser_families: [\"Firefox Mobile\", \"Opera Mobile\", \"Opera Mini\", \"Mobile Safari\", \"webOS\", \"IE Mobile\", \"Playstation Portable\", \"Nokia\", \"Blackberry\", \"Palm\", \"Silk\", \"Android\", \"Maemo\", \"Obigo\", \"Netfront\", \"AvantGo\", \"Teleca\", \"SEMC-Browser\", \"Bolt\", \"Iris\", \"UP.Browser\", \"Symphony\", \"Minimo\", \"Bunjaloo\", \"Jasmine\", \"Dolfin\", \"Polaris\", \"BREW\", \"Chrome Mobile\", \"Chrome Mobile iOS\", \"UC Browser\", \"Tizen Browser\"]\n    }; // Parsers\n\n    _this.parsers = [\"device_parsers\", \"browser_parsers\", \"os_parsers\", \"mobile_os_families\", \"mobile_browser_families\"]; // Types\n\n    _this.types = [\"browser\", \"os\", \"device\"]; // Regular Expressions\n\n    _this.regexes = regexes || function () {\n      var results = {};\n\n      _this.parsers.map(function (parser) {\n        results[parser] = [];\n      });\n\n      return results;\n    }(); // Families\n\n\n    _this.families = function () {\n      var results = {};\n\n      _this.types.map(function (type) {\n        results[type] = [];\n      });\n\n      return results;\n    }(); // Utility Variables\n\n\n    var ArrayProto = Array.prototype,\n        ObjProto = Object.prototype,\n        FuncProto = Function.prototype,\n        nativeForEach = ArrayProto.forEach,\n        nativeIndexOf = ArrayProto.indexOf; // Find Utility\n\n    var find = function (ua, obj) {\n      var ret = {};\n\n      for (var i = 0; i < obj.length; i++) {\n        ret = obj[i](ua);\n\n        if (ret) {\n          break;\n        }\n      }\n\n      return ret;\n    }; // Remove Utility\n\n\n    var remove = function (arr, props) {\n      each(arr, function (obj) {\n        each(props, function (prop) {\n          delete obj[prop];\n        });\n      });\n    }; // Contains Utility\n\n\n    var contains = function (obj, target) {\n      var found = false;\n      if (obj == null) return found;\n      if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\n      found = any(function (value) {\n        return value === target;\n      });\n      return found;\n    }; // Each Utility\n\n\n    var each = forEach = function (obj, iterator, context) {\n      if (obj == null) return;\n\n      if (nativeForEach && obj.forEach === nativeForEach) {\n        obj.forEach(iterator, context);\n      } else if (obj.length === +obj.length) {\n        for (var i = 0, l = obj.length; i < l; i++) {\n          iterator.call(context, obj[i], i, obj);\n        }\n      } else {\n        for (var key in obj) {\n          if (_.has(obj, key)) {\n            iterator.call(context, obj[key], key, obj);\n          }\n        }\n      }\n    }; // Extend Utiltiy\n\n\n    var extend = function (obj) {\n      each(slice.call(arguments, 1), function (source) {\n        for (var prop in source) {\n          obj[prop] = source[prop];\n        }\n      });\n      return obj;\n    }; // Check String Utility\n\n\n    var check = function (str) {\n      return !!(str && typeof str != \"undefined\" && str != null);\n    }; // To Version String Utility\n\n\n    var toVersionString = function (obj) {\n      var output = \"\";\n      obj = obj || {};\n\n      if (check(obj)) {\n        if (check(obj.major)) {\n          output += obj.major;\n\n          if (check(obj.minor)) {\n            output += \".\" + obj.minor;\n\n            if (check(obj.patch)) {\n              output += \".\" + obj.patch;\n            }\n          }\n        }\n      }\n\n      return output;\n    }; // To String Utility\n\n\n    var toString = function (obj) {\n      obj = obj || {};\n      var suffix = toVersionString(obj);\n      if (suffix) suffix = \" \" + suffix;\n      return obj && check(obj.family) ? obj.family + suffix : \"\";\n    }; // Parse User-Agent String\n\n\n    _this.parse = function (ua) {\n      // Parsers Utility\n      var parsers = function (type) {\n        return _this.regexes[type + \"_parsers\"].map(function (obj) {\n          var regexp = new RegExp(obj.regex),\n              rep = obj[(type === \"browser\" ? \"family\" : type) + \"_replacement\"],\n              major_rep = obj.major_version_replacement;\n\n          function parser(ua) {\n            var m = ua.match(regexp);\n            if (!m) return null;\n            var ret = {};\n            ret.family = (rep ? rep.replace(\"$1\", m[1]) : m[1]) || \"other\";\n            ret.major = parseInt(major_rep ? major_rep : m[2]) || null;\n            ret.minor = m[3] ? parseInt(m[3]) : null;\n            ret.patch = m[4] ? parseInt(m[4]) : null;\n            ret.tablet = obj.tablet;\n            ret.man = obj.manufacturer || null;\n            return ret;\n          }\n\n          return parser;\n        });\n      }; // User Agent\n\n\n      var UserAgent = function () {}; // Browsers Parsed\n\n\n      var browser_parsers = parsers(\"browser\"); // Operating Systems Parsed\n\n      var os_parsers = parsers(\"os\"); // Devices Parsed\n\n      var device_parsers = parsers(\"device\"); // Set Agent\n\n      var a = new UserAgent(); // Remember the original user agent string\n\n      a.source = ua; // Set Browser\n\n      a.browser = find(ua, browser_parsers);\n\n      if (check(a.browser)) {\n        a.browser.name = toString(a.browser);\n        a.browser.version = toVersionString(a.browser);\n      } else {\n        a.browser = {};\n      } // Set OS\n\n\n      a.os = find(ua, os_parsers);\n\n      if (check(a.os)) {\n        a.os.name = toString(a.os);\n        a.os.version = toVersionString(a.os);\n      } else {\n        a.os = {};\n      } // Set Device\n\n\n      a.device = find(ua, device_parsers);\n\n      if (check(a.device)) {\n        a.device.name = toString(a.device);\n        a.device.version = toVersionString(a.device);\n      } else {\n        a.device = {\n          tablet: false,\n          family: \"Other\"\n        };\n      } // Determine Device Type\n\n\n      var mobile_agents = {};\n\n      var mobile_browser_families = _this.regexes.mobile_browser_families.map(function (str) {\n        mobile_agents[str] = true;\n      });\n\n      var mobile_os_families = _this.regexes.mobile_os_families.map(function (str) {\n        mobile_agents[str] = true;\n      }); // Is Spider\n\n\n      if (a.browser.family === \"Spider\") {\n        a.device.type = \"Spider\";\n      } else if (a.browser.tablet || a.os.tablet || a.device.tablet) {\n        a.device.type = \"Tablet\";\n      } else if (mobile_agents.hasOwnProperty(a.browser.family)) {\n        a.device.type = \"Mobile\";\n      } else {\n        a.device.type = \"Desktop\";\n      } // Determine Device Manufacturer\n\n\n      a.device.manufacturer = a.browser.man || a.os.man || a.device.man || null; // Cleanup Objects\n\n      remove([a.browser, a.os, a.device], [\"tablet\", \"man\"]); // Return Agent\n\n      return a;\n    }; // Return context\n\n\n    return _this;\n  }(); // Export the Underscore object for **Node.js** and **\"CommonJS\"**,\n  // backwards-compatibility for the old `require()` API. If we're not\n  // CommonJS, add `_` to the global object via a string identifier\n  // the Closure Compiler \"advanced\" mode. Registration as an AMD\n  // via define() happens at the end of this file\n\n\n  if (typeof exports !== \"undefined\") {\n    if (typeof module !== \"undefined\" && module.exports) {\n      exports = module.exports = detect;\n    }\n\n    exports.detect = detect;\n  } else {\n    root[\"detect\"] = detect;\n  } // AMD define happens at the end for compatibility with AMD\n  // that don't enforce next-turn semantics on modules\n\n\n  if (typeof define === \"function\" && define.amd) {\n    define(function (require) {\n      return detect;\n    });\n  }\n})(window);","map":{"version":3,"sources":["C:/Users/rshub/Desktop/Road-to-Jedi/mobile-road/src/libs/detect.js"],"names":["root","undefined","Array","prototype","map","callback","thisArg","T","A","k","TypeError","O","Object","len","length","kValue","mappedValue","call","detect","_this","regexes","browser_parsers","regex","family_replacement","manufacturer","other","family_replacment","tablet","v2_replacement","v1_replacement","os_parsers","os_v2_replacement","os_v1_replacement","os_replacement","mobile_os_families","device_parsers","device_replacement","mobile_browser_families","parsers","types","results","parser","families","type","ArrayProto","ObjProto","FuncProto","Function","nativeForEach","forEach","nativeIndexOf","indexOf","find","ua","obj","ret","i","remove","arr","props","each","prop","contains","target","found","any","value","iterator","context","l","key","_","has","extend","slice","arguments","source","check","str","toVersionString","output","major","minor","patch","toString","suffix","family","parse","regexp","RegExp","rep","major_rep","major_version_replacement","m","match","replace","parseInt","man","UserAgent","a","browser","name","version","os","device","mobile_agents","hasOwnProperty","exports","module","define","amd","require","window"],"mappings":"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","sourcesContent":["/**\r\n * Detect.js: User-Agent Parser\r\n * https://github.com/darcyclarke/Detect.js\r\n * Dual licensed under the MIT and GPL licenses.\r\n *\r\n * @version 2.2.2\r\n * @author Darcy Clarke\r\n * @url http://darcyclarke.me\r\n * @createdat Mon Oct 26 2015 08:21:54 GMT-0200 (Horário brasileiro de verão)\r\n *\r\n * Based on UA-Parser (https://github.com/tobie/ua-parser) by Tobie Langel\r\n *\r\n * Example Usage:\r\n * var agentInfo = detect.parse(navigator.userAgent);\r\n * console.log(agentInfo.browser.family); // Chrome\r\n *\r\n */\r\n(function(root, undefined) {\r\n    // Shim Array.prototype.map if necessary\r\n    // Production steps of ECMA-262, Edition 5, 15.4.4.19\r\n    // Reference: http://es5.github.com/#x15.4.4.19\r\n    if (!Array.prototype.map) {\r\n        Array.prototype.map = function(callback, thisArg) {\r\n            var T, A, k;\r\n            if (this == null) {\r\n                throw new TypeError(\" this is null or not defined\");\r\n            }\r\n            // 1. Let O be the result of calling ToObject passing the |this| value as the argument.\r\n            var O = Object(this);\r\n            // 2. Let lenValue be the result of calling the Get internal method of O with the argument \"length\".\r\n            // 3. Let len be ToUint32(lenValue).\r\n            var len = O.length >>> 0;\r\n            // 4. If IsCallable(callback) is false, throw a TypeError exception.\r\n            // See: http://es5.github.com/#x9.11\r\n            if (typeof callback !== \"function\") {\r\n                throw new TypeError(callback + \" is not a function\");\r\n            }\r\n            // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n            if (thisArg) {\r\n                T = thisArg;\r\n            }\r\n            // 6. Let A be a new array created as if by the expression new Array(len) where Array is\r\n            // the standard built-in constructor with that name and len is the value of len.\r\n            A = new Array(len);\r\n            // 7. Let k be 0\r\n            k = 0;\r\n            // 8. Repeat, while k < len\r\n            while (k < len) {\r\n                var kValue, mappedValue;\r\n                // a. Let Pk be ToString(k).\r\n                //   This is implicit for LHS operands of the in operator\r\n                // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.\r\n                //   This step can be combined with c\r\n                // c. If kPresent is true, then\r\n                if (k in O) {\r\n                    // i. Let kValue be the result of calling the Get internal method of O with argument Pk.\r\n                    kValue = O[k];\r\n                    // ii. Let mappedValue be the result of calling the Call internal method of callback\r\n                    // with T as the this value and argument list containing kValue, k, and O.\r\n                    mappedValue = callback.call(T, kValue, k, O);\r\n                    // iii. Call the DefineOwnProperty internal method of A with arguments\r\n                    // Pk, Property Descriptor {Value: mappedValue, : true, Enumerable: true, Configurable: true},\r\n                    // and false.\r\n                    // In browsers that support Object.defineProperty, use the following:\r\n                    // Object.defineProperty(A, Pk, { value: mappedValue, writable: true, enumerable: true, configurable: true });\r\n                    // For best browser support, use the following:\r\n                    A[k] = mappedValue;\r\n                }\r\n                // d. Increase k by 1.\r\n                k++;\r\n            }\r\n            // 9. return A\r\n            return A;\r\n        };\r\n    }\r\n    // Detect\r\n    var detect = root.detect = function() {\r\n        // Context\r\n        var _this = function() {};\r\n        // Regexes\r\n        var regexes = {\r\n            browser_parsers: [ {\r\n                regex: \"^(Opera)/(\\\\d+)\\\\.(\\\\d+) \\\\(Nintendo Wii\",\r\n                family_replacement: \"Wii\",\r\n                manufacturer: \"Nintendo\"\r\n            }, {\r\n                regex: \"(SeaMonkey|Camino)/(\\\\d+)\\\\.(\\\\d+)\\\\.?([ab]?\\\\d+[a-z]*)\",\r\n                family_replacement: \"Camino\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Pale[Mm]oon)/(\\\\d+)\\\\.(\\\\d+)\\\\.?(\\\\d+)?\",\r\n                family_replacement: \"Pale Moon (Firefox Variant)\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Fennec)/(\\\\d+)\\\\.(\\\\d+)\\\\.?([ab]?\\\\d+[a-z]*)\",\r\n                family_replacement: \"Firefox Mobile\"\r\n            }, {\r\n                regex: \"(Fennec)/(\\\\d+)\\\\.(\\\\d+)(pre)\",\r\n                family_replacment: \"Firefox Mobile\"\r\n            }, {\r\n                regex: \"(Fennec)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Firefox Mobile\"\r\n            }, {\r\n                regex: \"Mobile.*(Firefox)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Firefox Mobile\"\r\n            }, {\r\n                regex: \"(Namoroka|Shiretoko|Minefield)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+(?:pre)?)\",\r\n                family_replacement: \"Firefox ($1)\"\r\n            }, {\r\n                regex: \"(Firefox)/(\\\\d+)\\\\.(\\\\d+)(a\\\\d+[a-z]*)\",\r\n                family_replacement: \"Firefox Alpha\"\r\n            }, {\r\n                regex: \"(Firefox)/(\\\\d+)\\\\.(\\\\d+)(b\\\\d+[a-z]*)\",\r\n                family_replacement: \"Firefox Beta\"\r\n            }, {\r\n                regex: \"(Firefox)-(?:\\\\d+\\\\.\\\\d+)?/(\\\\d+)\\\\.(\\\\d+)(a\\\\d+[a-z]*)\",\r\n                family_replacement: \"Firefox Alpha\"\r\n            }, {\r\n                regex: \"(Firefox)-(?:\\\\d+\\\\.\\\\d+)?/(\\\\d+)\\\\.(\\\\d+)(b\\\\d+[a-z]*)\",\r\n                family_replacement: \"Firefox Beta\"\r\n            }, {\r\n                regex: \"(Namoroka|Shiretoko|Minefield)/(\\\\d+)\\\\.(\\\\d+)([ab]\\\\d+[a-z]*)?\",\r\n                family_replacement: \"Firefox ($1)\"\r\n            }, {\r\n                regex: \"(Firefox).*Tablet browser (\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"MicroB\",\r\n                tablet: true\r\n            }, {\r\n                regex: \"(MozillaDeveloperPreview)/(\\\\d+)\\\\.(\\\\d+)([ab]\\\\d+[a-z]*)?\"\r\n            }, {\r\n                regex: \"(Flock)/(\\\\d+)\\\\.(\\\\d+)(b\\\\d+?)\",\r\n                family_replacement: \"Flock\",\r\n                other: true\r\n            }, {\r\n                regex: \"(RockMelt)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Rockmelt\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Navigator)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Netscape\"\r\n            }, {\r\n                regex: \"(Navigator)/(\\\\d+)\\\\.(\\\\d+)([ab]\\\\d+)\",\r\n                family_replacement: \"Netscape\"\r\n            }, {\r\n                regex: \"(Netscape6)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Netscape\"\r\n            }, {\r\n                regex: \"(MyIBrow)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"My Internet Browser\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Opera Tablet).*Version/(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\r\n                family_replacement: \"Opera Tablet\",\r\n                tablet: true\r\n            }, {\r\n                regex: \"(Opera)/.+Opera Mobi.+Version/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Opera Mobile\"\r\n            }, {\r\n                regex: \"Opera Mobi\",\r\n                family_replacement: \"Opera Mobile\"\r\n            }, {\r\n                regex: \"(Opera Mini)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Opera Mini\"\r\n            }, {\r\n                regex: \"(Opera Mini)/att/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Opera Mini\"\r\n            }, {\r\n                regex: \"(Opera)/9.80.*Version/(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\r\n                family_replacement: \"Opera\"\r\n            }, {\r\n                regex: \"(OPR)/(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\r\n                family_replacement: \"Opera\"\r\n            }, {\r\n                regex: \"(webOSBrowser)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"webOS\"\r\n            }, {\r\n                regex: \"(webOS)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"webOS\"\r\n            }, {\r\n                regex: \"(wOSBrowser).+TouchPad/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"webOS TouchPad\"\r\n            }, {\r\n                regex: \"(luakit)\",\r\n                family_replacement: \"LuaKit\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Lightning)/(\\\\d+)\\\\.(\\\\d+)([ab]?\\\\d+[a-z]*)\",\r\n                family_replacement: \"Lightning\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Firefox)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+(?:pre)?) \\\\(Swiftfox\\\\)\",\r\n                family_replacement: \"Swiftfox\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Firefox)/(\\\\d+)\\\\.(\\\\d+)([ab]\\\\d+[a-z]*)? \\\\(Swiftfox\\\\)\",\r\n                family_replacement: \"Swiftfox\",\r\n                other: true\r\n            }, {\r\n                regex: \"rekonq\",\r\n                family_replacement: \"Rekonq\",\r\n                other: true\r\n            }, {\r\n                regex: \"(conkeror|Conkeror)/(\\\\d+)\\\\.(\\\\d+)\\\\.?(\\\\d+)?\",\r\n                family_replacement: \"Conkeror\",\r\n                other: true\r\n            }, {\r\n                regex: \"(konqueror)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Konqueror\",\r\n                other: true\r\n            }, {\r\n                regex: \"(WeTab)-Browser\",\r\n                family_replacement: \"WeTab\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Comodo_Dragon)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Comodo Dragon\",\r\n                other: true\r\n            }, {\r\n                regex: \"(YottaaMonitor)\",\r\n                family_replacement: \"Yottaa Monitor\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Kindle)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Kindle\"\r\n            }, {\r\n                regex: \"(Symphony) (\\\\d+).(\\\\d+)\",\r\n                family_replacement: \"Symphony\",\r\n                other: true\r\n            }, {\r\n                regex: \"Minimo\",\r\n                family_replacement: \"Minimo\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Edge)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Edge\"\r\n            }, {\r\n                regex: \"(CrMo)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Chrome Mobile\"\r\n            }, {\r\n                regex: \"(CriOS)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Chrome Mobile iOS\"\r\n            }, {\r\n                regex: \"(Chrome)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+) Mobile\",\r\n                family_replacement: \"Chrome Mobile\"\r\n            }, {\r\n                regex: \"(chromeframe)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Chrome Frame\"\r\n            }, {\r\n                regex: \"(UC Browser)(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"UC Browser\",\r\n                other: true\r\n            }, {\r\n                regex: \"(SLP Browser)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Tizen Browser\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Epiphany)/(\\\\d+)\\\\.(\\\\d+).(\\\\d+)\",\r\n                family_replacement: \"Epiphany\",\r\n                other: true\r\n            }, {\r\n                regex: \"(SE 2\\\\.X) MetaSr (\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Sogou Explorer\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Pingdom.com_bot_version_)(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"PingdomBot\",\r\n                other: true\r\n            }, {\r\n                regex: \"(facebookexternalhit)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"FacebookBot\"\r\n            }, {\r\n                regex: \"(Twitterbot)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"TwitterBot\"\r\n            }, {\r\n                regex: \"(AdobeAIR|Chromium|FireWeb|Jasmine|ANTGalio|Midori|Fresco|Lobo|PaleMoon|Maxthon|Lynx|OmniWeb|Dillo|Camino|Demeter|Fluid|Fennec|Shiira|Sunrise|Chrome|Flock|Netscape|Lunascape|WebPilot|NetFront|Netfront|Konqueror|SeaMonkey|Kazehakase|Vienna|Iceape|Iceweasel|IceWeasel|Iron|K-Meleon|Sleipnir|Galeon|GranParadiso|Opera Mini|iCab|NetNewsWire|ThunderBrowse|Iron|Iris|UP\\\\.Browser|Bunjaloo|Google Earth|Raven for Mac)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\"\r\n            }, {\r\n                regex: \"(Bolt|Jasmine|IceCat|Skyfire|Midori|Maxthon|Lynx|Arora|IBrowse|Dillo|Camino|Shiira|Fennec|Phoenix|Chrome|Flock|Netscape|Lunascape|Epiphany|WebPilot|Opera Mini|Opera|NetFront|Netfront|Konqueror|Googlebot|SeaMonkey|Kazehakase|Vienna|Iceape|Iceweasel|IceWeasel|Iron|K-Meleon|Sleipnir|Galeon|GranParadiso|iCab|NetNewsWire|Iron|Space Bison|Stainless|Orca|Dolfin|BOLT|Minimo|Tizen Browser|Polaris)/(\\\\d+)\\\\.(\\\\d+)\"\r\n            }, {\r\n                regex: \"(iRider|Crazy Browser|SkipStone|iCab|Lunascape|Sleipnir|Maemo Browser) (\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\"\r\n            }, {\r\n                regex: \"(iCab|Lunascape|Opera|Android|Jasmine|Polaris|BREW) (\\\\d+)\\\\.(\\\\d+)\\\\.?(\\\\d+)?\"\r\n            }, {\r\n                regex: \"(Android) Donut\",\r\n                v2_replacement: \"2\",\r\n                v1_replacement: \"1\"\r\n            }, {\r\n                regex: \"(Android) Eclair\",\r\n                v2_replacement: \"1\",\r\n                v1_replacement: \"2\"\r\n            }, {\r\n                regex: \"(Android) Froyo\",\r\n                v2_replacement: \"2\",\r\n                v1_replacement: \"2\"\r\n            }, {\r\n                regex: \"(Android) Gingerbread\",\r\n                v2_replacement: \"3\",\r\n                v1_replacement: \"2\"\r\n            }, {\r\n                regex: \"(Android) Honeycomb\",\r\n                v1_replacement: \"3\"\r\n            }, {\r\n                regex: \"(IEMobile)[ /](\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"IE Mobile\"\r\n            }, {\r\n                regex: \"(MSIE) (\\\\d+)\\\\.(\\\\d+).*XBLWP7\",\r\n                family_replacement: \"IE Large Screen\"\r\n            }, {\r\n                regex: \"(Firefox)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\"\r\n            }, {\r\n                regex: \"(Firefox)/(\\\\d+)\\\\.(\\\\d+)(pre|[ab]\\\\d+[a-z]*)?\"\r\n            }, {\r\n                regex: \"(Obigo)InternetBrowser\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Obigo)\\\\-Browser\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Obigo|OBIGO)[^\\\\d]*(\\\\d+)(?:.(\\\\d+))?\",\r\n                other: true\r\n            }, {\r\n                regex: \"(MAXTHON|Maxthon) (\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Maxthon\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Maxthon|MyIE2|Uzbl|Shiira)\",\r\n                v1_replacement: \"0\",\r\n                other: true\r\n            }, {\r\n                regex: \"(PLAYSTATION) (\\\\d+)\",\r\n                family_replacement: \"PlayStation\",\r\n                manufacturer: \"Sony\"\r\n            }, {\r\n                regex: \"(PlayStation Portable)[^\\\\d]+(\\\\d+).(\\\\d+)\",\r\n                manufacturer: \"Sony\"\r\n            }, {\r\n                regex: \"(BrowseX) \\\\((\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                other: true\r\n            }, {\r\n                regex: \"(POLARIS)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Polaris\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Embider)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Polaris\",\r\n                other: true\r\n            }, {\r\n                regex: \"(BonEcho)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Bon Echo\",\r\n                other: true\r\n            }, {\r\n                regex: \"(iPod).+Version/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Mobile Safari\",\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(iPod).*Version/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Mobile Safari\",\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(iPod)\",\r\n                family_replacement: \"Mobile Safari\",\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(iPhone).*Version/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Mobile Safari\",\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(iPhone).*Version/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Mobile Safari\",\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(iPhone)\",\r\n                family_replacement: \"Mobile Safari\",\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(iPad).*Version/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Mobile Safari\",\r\n                tablet: true,\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(iPad).*Version/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Mobile Safari\",\r\n                tablet: true,\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(iPad)\",\r\n                family_replacement: \"Mobile Safari\",\r\n                tablet: true,\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(AvantGo) (\\\\d+).(\\\\d+)\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Avant)\",\r\n                v1_replacement: \"1\",\r\n                other: true\r\n            }, {\r\n                regex: \"^(Nokia)\",\r\n                family_replacement: \"Nokia Services (WAP) Browser\",\r\n                manufacturer: \"Nokia\"\r\n            }, {\r\n                regex: \"(NokiaBrowser)/(\\\\d+)\\\\.(\\\\d+).(\\\\d+)\\\\.(\\\\d+)\",\r\n                manufacturer: \"Nokia\"\r\n            }, {\r\n                regex: \"(NokiaBrowser)/(\\\\d+)\\\\.(\\\\d+).(\\\\d+)\",\r\n                manufacturer: \"Nokia\"\r\n            }, {\r\n                regex: \"(NokiaBrowser)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                manufacturer: \"Nokia\"\r\n            }, {\r\n                regex: \"(BrowserNG)/(\\\\d+)\\\\.(\\\\d+).(\\\\d+)\",\r\n                family_replacement: \"NokiaBrowser\",\r\n                manufacturer: \"Nokia\"\r\n            }, {\r\n                regex: \"(Series60)/5\\\\.0\",\r\n                v2_replacement: \"0\",\r\n                v1_replacement: \"7\",\r\n                family_replacement: \"NokiaBrowser\",\r\n                manufacturer: \"Nokia\"\r\n            }, {\r\n                regex: \"(Series60)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Nokia OSS Browser\",\r\n                manufacturer: \"Nokia\"\r\n            }, {\r\n                regex: \"(S40OviBrowser)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Nokia Series 40 Ovi Browser\",\r\n                manufacturer: \"Nokia\"\r\n            }, {\r\n                regex: \"(Nokia)[EN]?(\\\\d+)\",\r\n                manufacturer: \"Nokia\"\r\n            }, {\r\n                regex: \"(PlayBook).+RIM Tablet OS (\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Blackberry WebKit\",\r\n                tablet: true,\r\n                manufacturer: \"Nokia\"\r\n            }, {\r\n                regex: \"(Black[bB]erry).+Version/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Blackberry WebKit\",\r\n                manufacturer: \"RIM\"\r\n            }, {\r\n                regex: \"(Black[bB]erry)\\\\s?(\\\\d+)\",\r\n                family_replacement: \"Blackberry\",\r\n                manufacturer: \"RIM\"\r\n            }, {\r\n                regex: \"(OmniWeb)/v(\\\\d+)\\\\.(\\\\d+)\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Blazer)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Palm Blazer\",\r\n                manufacturer: \"Palm\"\r\n            }, {\r\n                regex: \"(Pre)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"Palm Pre\",\r\n                manufacturer: \"Palm\"\r\n            }, {\r\n                regex: \"(Links) \\\\((\\\\d+)\\\\.(\\\\d+)\",\r\n                other: true\r\n            }, {\r\n                regex: \"(QtWeb) Internet Browser/(\\\\d+)\\\\.(\\\\d+)\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Silk)/(\\\\d+)\\\\.(\\\\d+)(?:\\\\.([0-9\\\\-]+))?\",\r\n                other: true,\r\n                tablet: true\r\n            }, {\r\n                regex: \"(AppleWebKit)/(\\\\d+)\\\\.?(\\\\d+)?\\\\+ .* Version/\\\\d+\\\\.\\\\d+.\\\\d+ Safari/\",\r\n                family_replacement: \"WebKit Nightly\"\r\n            }, {\r\n                regex: \"(Version)/(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?.*Safari/\",\r\n                family_replacement: \"Safari\"\r\n            }, {\r\n                regex: \"(Safari)/\\\\d+\"\r\n            }, {\r\n                regex: \"(OLPC)/Update(\\\\d+)\\\\.(\\\\d+)\",\r\n                other: true\r\n            }, {\r\n                regex: \"(OLPC)/Update()\\\\.(\\\\d+)\",\r\n                v1_replacement: \"0\",\r\n                other: true\r\n            }, {\r\n                regex: \"(SEMC\\\\-Browser)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Teleca)\",\r\n                family_replacement: \"Teleca Browser\",\r\n                other: true\r\n            }, {\r\n                regex: \"Trident(.*)rv.(\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"IE\"\r\n            }, {\r\n                regex: \"(MSIE) (\\\\d+)\\\\.(\\\\d+)\",\r\n                family_replacement: \"IE\"\r\n            } ],\r\n            os_parsers: [ {\r\n                regex: \"(Android) (\\\\d+)\\\\.(\\\\d+)(?:[.\\\\-]([a-z0-9]+))?\"\r\n            }, {\r\n                regex: \"(Android)\\\\-(\\\\d+)\\\\.(\\\\d+)(?:[.\\\\-]([a-z0-9]+))?\"\r\n            }, {\r\n                regex: \"(Android) Donut\",\r\n                os_v2_replacement: \"2\",\r\n                os_v1_replacement: \"1\"\r\n            }, {\r\n                regex: \"(Android) Eclair\",\r\n                os_v2_replacement: \"1\",\r\n                os_v1_replacement: \"2\"\r\n            }, {\r\n                regex: \"(Android) Froyo\",\r\n                os_v2_replacement: \"2\",\r\n                os_v1_replacement: \"2\"\r\n            }, {\r\n                regex: \"(Android) Gingerbread\",\r\n                os_v2_replacement: \"3\",\r\n                os_v1_replacement: \"2\"\r\n            }, {\r\n                regex: \"(Android) Honeycomb\",\r\n                os_v1_replacement: \"3\"\r\n            }, {\r\n                regex: \"(Silk-Accelerated=[a-z]{4,5})\",\r\n                os_replacement: \"Android\"\r\n            }, {\r\n                regex: \"(Windows Phone 6\\\\.5)\"\r\n            }, {\r\n                regex: \"(Windows (?:NT 5\\\\.2|NT 5\\\\.1))\",\r\n                os_replacement: \"Windows XP\"\r\n            }, {\r\n                regex: \"(XBLWP7)\",\r\n                os_replacement: \"Windows Phone OS\"\r\n            }, {\r\n                regex: \"(Windows NT 6\\\\.1)\",\r\n                os_replacement: \"Windows 7\"\r\n            }, {\r\n                regex: \"(Windows NT 6\\\\.0)\",\r\n                os_replacement: \"Windows Vista\"\r\n            }, {\r\n                regex: \"(Windows 98|Windows XP|Windows ME|Windows 95|Windows CE|Windows 7|Windows NT 4\\\\.0|Windows Vista|Windows 2000)\"\r\n            }, {\r\n                regex: \"(Windows NT 6\\\\.4|Windows NT 10\\\\.0)\",\r\n                os_replacement: \"Windows 10\"\r\n            }, {\r\n                regex: \"(Windows NT 6\\\\.2)\",\r\n                os_replacement: \"Windows 8\"\r\n            }, {\r\n                regex: \"(Windows Phone 8)\",\r\n                os_replacement: \"Windows Phone 8\"\r\n            }, {\r\n                regex: \"(Windows NT 5\\\\.0)\",\r\n                os_replacement: \"Windows 2000\"\r\n            }, {\r\n                regex: \"(Windows Phone OS) (\\\\d+)\\\\.(\\\\d+)\"\r\n            }, {\r\n                regex: \"(Windows ?Mobile)\",\r\n                os_replacement: \"Windows Mobile\"\r\n            }, {\r\n                regex: \"(WinNT4.0)\",\r\n                os_replacement: \"Windows NT 4.0\"\r\n            }, {\r\n                regex: \"(Win98)\",\r\n                os_replacement: \"Windows 98\"\r\n            }, {\r\n                regex: \"(Tizen)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Mac OS X) (\\\\d+)[_.](\\\\d+)(?:[_.](\\\\d+))?\",\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(?:PPC|Intel) (Mac OS X)\",\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(CPU OS|iPhone OS) (\\\\d+)_(\\\\d+)(?:_(\\\\d+))?\",\r\n                os_replacement: \"iOS\",\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(iPhone|iPad|iPod); Opera\",\r\n                os_replacement: \"iOS\",\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(iPad); Opera\",\r\n                tablet: true,\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(iPhone|iPad|iPod).*Mac OS X.*Version/(\\\\d+)\\\\.(\\\\d+)\",\r\n                os_replacement: \"iOS\",\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(CrOS) [a-z0-9_]+ (\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\r\n                os_replacement: \"Chrome OS\"\r\n            }, {\r\n                regex: \"(Debian)-(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Linux Mint)(?:/(\\\\d+))?\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Mandriva)(?: Linux)?/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Symbian[Oo][Ss])/(\\\\d+)\\\\.(\\\\d+)\",\r\n                os_replacement: \"Symbian OS\"\r\n            }, {\r\n                regex: \"(Symbian/3).+NokiaBrowser/7\\\\.3\",\r\n                os_replacement: \"Symbian^3 Anna\"\r\n            }, {\r\n                regex: \"(Symbian/3).+NokiaBrowser/7\\\\.4\",\r\n                os_replacement: \"Symbian^3 Belle\"\r\n            }, {\r\n                regex: \"(Symbian/3)\",\r\n                os_replacement: \"Symbian^3\"\r\n            }, {\r\n                regex: \"(Series 60|SymbOS|S60)\",\r\n                os_replacement: \"Symbian OS\"\r\n            }, {\r\n                regex: \"(MeeGo)\",\r\n                other: true\r\n            }, {\r\n                regex: \"Symbian [Oo][Ss]\",\r\n                os_replacement: \"Symbian OS\"\r\n            }, {\r\n                regex: \"(Black[Bb]erry)[0-9a-z]+/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\r\n                os_replacement: \"BlackBerry OS\",\r\n                manufacturer: \"RIM\"\r\n            }, {\r\n                regex: \"(Black[Bb]erry).+Version/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\r\n                os_replacement: \"BlackBerry OS\",\r\n                manufacturer: \"RIM\"\r\n            }, {\r\n                regex: \"(RIM Tablet OS) (\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                os_replacement: \"BlackBerry Tablet OS\",\r\n                tablet: true,\r\n                manufacturer: \"RIM\"\r\n            }, {\r\n                regex: \"(Play[Bb]ook)\",\r\n                os_replacement: \"BlackBerry Tablet OS\",\r\n                tablet: true,\r\n                manufacturer: \"RIM\"\r\n            }, {\r\n                regex: \"(Black[Bb]erry)\",\r\n                os_replacement: \"Blackberry OS\",\r\n                manufacturer: \"RIM\"\r\n            }, {\r\n                regex: \"(webOS|hpwOS)/(\\\\d+)\\\\.(\\\\d+)(?:\\\\.(\\\\d+))?\",\r\n                os_replacement: \"webOS\"\r\n            }, {\r\n                regex: \"(SUSE|Fedora|Red Hat|PCLinuxOS)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                other: true\r\n            }, {\r\n                regex: \"(SUSE|Fedora|Red Hat|Puppy|PCLinuxOS|CentOS)/(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)\",\r\n                other: true\r\n            }, {\r\n                regex: \"(Ubuntu|Kindle|Bada|Lubuntu|BackTrack|Red Hat|Slackware)/(\\\\d+)\\\\.(\\\\d+)\"\r\n            }, {\r\n                regex: \"(Windows|OpenBSD|FreeBSD|NetBSD|Ubuntu|Kubuntu|Android|Arch Linux|CentOS|WeTab|Slackware)\"\r\n            }, {\r\n                regex: \"(Linux|BSD)\",\r\n                other: true\r\n            } ],\r\n            mobile_os_families: [ \"Windows Phone 6.5\", \"Windows CE\", \"Symbian OS\" ],\r\n            device_parsers: [ {\r\n                regex: \"HTC ([A-Z][a-z0-9]+) Build\",\r\n                device_replacement: \"HTC $1\",\r\n                manufacturer: \"HTC\"\r\n            }, {\r\n                regex: \"HTC ([A-Z][a-z0-9 ]+) \\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\",\r\n                device_replacement: \"HTC $1\",\r\n                manufacturer: \"HTC\"\r\n            }, {\r\n                regex: \"HTC_Touch_([A-Za-z0-9]+)\",\r\n                device_replacement: \"HTC Touch ($1)\",\r\n                manufacturer: \"HTC\"\r\n            }, {\r\n                regex: \"USCCHTC(\\\\d+)\",\r\n                device_replacement: \"HTC $1 (US Cellular)\",\r\n                manufacturer: \"HTC\"\r\n            }, {\r\n                regex: \"Sprint APA(9292)\",\r\n                device_replacement: \"HTC $1 (Sprint)\",\r\n                manufacturer: \"HTC\"\r\n            }, {\r\n                regex: \"HTC ([A-Za-z0-9]+ [A-Z])\",\r\n                device_replacement: \"HTC $1\",\r\n                manufacturer: \"HTC\"\r\n            }, {\r\n                regex: \"HTC-([A-Za-z0-9]+)\",\r\n                device_replacement: \"HTC $1\",\r\n                manufacturer: \"HTC\"\r\n            }, {\r\n                regex: \"HTC_([A-Za-z0-9]+)\",\r\n                device_replacement: \"HTC $1\",\r\n                manufacturer: \"HTC\"\r\n            }, {\r\n                regex: \"HTC ([A-Za-z0-9]+)\",\r\n                device_replacement: \"HTC $1\",\r\n                manufacturer: \"HTC\"\r\n            }, {\r\n                regex: \"(ADR[A-Za-z0-9]+)\",\r\n                device_replacement: \"HTC $1\",\r\n                manufacturer: \"HTC\"\r\n            }, {\r\n                regex: \"(HTC)\",\r\n                manufacturer: \"HTC\"\r\n            }, {\r\n                regex: \"SonyEricsson([A-Za-z0-9]+)/\",\r\n                device_replacement: \"Ericsson $1\",\r\n                other: true,\r\n                manufacturer: \"Sony\"\r\n            }, {\r\n                regex: \"Android[\\\\- ][\\\\d]+\\\\.[\\\\d]+\\\\; [A-Za-z]{2}\\\\-[A-Za-z]{2}\\\\; WOWMobile (.+) Build\"\r\n            }, {\r\n                regex: \"Android[\\\\- ][\\\\d]+\\\\.[\\\\d]+\\\\.[\\\\d]+; [A-Za-z]{2}\\\\-[A-Za-z]{2}\\\\; (.+) Build\"\r\n            }, {\r\n                regex: \"Android[\\\\- ][\\\\d]+\\\\.[\\\\d]+\\\\-update1\\\\; [A-Za-z]{2}\\\\-[A-Za-z]{2}\\\\; (.+) Build\"\r\n            }, {\r\n                regex: \"Android[\\\\- ][\\\\d]+\\\\.[\\\\d]+\\\\; [A-Za-z]{2}\\\\-[A-Za-z]{2}\\\\; (.+) Build\"\r\n            }, {\r\n                regex: \"Android[\\\\- ][\\\\d]+\\\\.[\\\\d]+\\\\.[\\\\d]+; (.+) Build\"\r\n            }, {\r\n                regex: \"NokiaN([0-9]+)\",\r\n                device_replacement: \"Nokia N$1\",\r\n                manufacturer: \"Nokia\"\r\n            }, {\r\n                regex: \"Nokia([A-Za-z0-9\\\\v-]+)\",\r\n                device_replacement: \"Nokia $1\",\r\n                manufacturer: \"Nokia\"\r\n            }, {\r\n                regex: \"NOKIA ([A-Za-z0-9\\\\-]+)\",\r\n                device_replacement: \"Nokia $1\",\r\n                manufacturer: \"Nokia\"\r\n            }, {\r\n                regex: \"Nokia ([A-Za-z0-9\\\\-]+)\",\r\n                device_replacement: \"Nokia $1\",\r\n                manufacturer: \"Nokia\"\r\n            }, {\r\n                regex: \"Lumia ([A-Za-z0-9\\\\-]+)\",\r\n                device_replacement: \"Lumia $1\",\r\n                manufacturer: \"Nokia\"\r\n            }, {\r\n                regex: \"Symbian\",\r\n                device_replacement: \"Nokia\",\r\n                manufacturer: \"Nokia\"\r\n            }, {\r\n                regex: \"(PlayBook).+RIM Tablet OS\",\r\n                device_replacement: \"Blackberry Playbook\",\r\n                tablet: true,\r\n                manufacturer: \"RIM\"\r\n            }, {\r\n                regex: \"(Black[Bb]erry [0-9]+);\",\r\n                manufacturer: \"RIM\"\r\n            }, {\r\n                regex: \"Black[Bb]erry([0-9]+)\",\r\n                device_replacement: \"BlackBerry $1\",\r\n                manufacturer: \"RIM\"\r\n            }, {\r\n                regex: \"(Pre)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                device_replacement: \"Palm Pre\",\r\n                manufacturer: \"Palm\"\r\n            }, {\r\n                regex: \"(Pixi)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                device_replacement: \"Palm Pixi\",\r\n                manufacturer: \"Palm\"\r\n            }, {\r\n                regex: \"(Touchpad)/(\\\\d+)\\\\.(\\\\d+)\",\r\n                device_replacement: \"HP Touchpad\",\r\n                manufacturer: \"HP\"\r\n            }, {\r\n                regex: \"HPiPAQ([A-Za-z0-9]+)/(\\\\d+).(\\\\d+)\",\r\n                device_replacement: \"HP iPAQ $1\",\r\n                manufacturer: \"HP\"\r\n            }, {\r\n                regex: \"Palm([A-Za-z0-9]+)\",\r\n                device_replacement: \"Palm $1\",\r\n                manufacturer: \"Palm\"\r\n            }, {\r\n                regex: \"Treo([A-Za-z0-9]+)\",\r\n                device_replacement: \"Palm Treo $1\",\r\n                manufacturer: \"Palm\"\r\n            }, {\r\n                regex: \"webOS.*(P160UNA)/(\\\\d+).(\\\\d+)\",\r\n                device_replacement: \"HP Veer\",\r\n                manufacturer: \"HP\"\r\n            }, {\r\n                regex: \"(Kindle Fire)\",\r\n                manufacturer: \"Amazon\"\r\n            }, {\r\n                regex: \"(Kindle)\",\r\n                manufacturer: \"Amazon\"\r\n            }, {\r\n                regex: \"(Silk)/(\\\\d+)\\\\.(\\\\d+)(?:\\\\.([0-9\\\\-]+))?\",\r\n                device_replacement: \"Kindle Fire\",\r\n                tablet: true,\r\n                manufacturer: \"Amazon\"\r\n            }, {\r\n                regex: \"(iPad) Simulator;\",\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(iPad);\",\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(iPod);\",\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(iPhone) Simulator;\",\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"(iPhone);\",\r\n                manufacturer: \"Apple\"\r\n            }, {\r\n                regex: \"Nexus\\\\ ([A-Za-z0-9\\\\-]+)\",\r\n                device_replacement: \"Nexus $1\"\r\n            }, {\r\n                regex: \"acer_([A-Za-z0-9]+)_\",\r\n                device_replacement: \"Acer $1\",\r\n                manufacturer: \"Acer\"\r\n            }, {\r\n                regex: \"acer_([A-Za-z0-9]+)_\",\r\n                device_replacement: \"Acer $1\",\r\n                manufacturer: \"Acer\"\r\n            }, {\r\n                regex: \"Amoi\\\\-([A-Za-z0-9]+)\",\r\n                device_replacement: \"Amoi $1\",\r\n                other: true,\r\n                manufacturer: \"Amoi\"\r\n            }, {\r\n                regex: \"AMOI\\\\-([A-Za-z0-9]+)\",\r\n                device_replacement: \"Amoi $1\",\r\n                other: true,\r\n                manufacturer: \"Amoi\"\r\n            }, {\r\n                regex: \"Asus\\\\-([A-Za-z0-9]+)\",\r\n                device_replacement: \"Asus $1\",\r\n                manufacturer: \"Asus\"\r\n            }, {\r\n                regex: \"ASUS\\\\-([A-Za-z0-9]+)\",\r\n                device_replacement: \"Asus $1\",\r\n                manufacturer: \"Asus\"\r\n            }, {\r\n                regex: \"BIRD\\\\-([A-Za-z0-9]+)\",\r\n                device_replacement: \"Bird $1\",\r\n                other: true\r\n            }, {\r\n                regex: \"BIRD\\\\.([A-Za-z0-9]+)\",\r\n                device_replacement: \"Bird $1\",\r\n                other: true\r\n            }, {\r\n                regex: \"BIRD ([A-Za-z0-9]+)\",\r\n                device_replacement: \"Bird $1\",\r\n                other: true\r\n            }, {\r\n                regex: \"Dell ([A-Za-z0-9]+)\",\r\n                device_replacement: \"Dell $1\",\r\n                manufacturer: \"Dell\"\r\n            }, {\r\n                regex: \"DoCoMo/2\\\\.0 ([A-Za-z0-9]+)\",\r\n                device_replacement: \"DoCoMo $1\",\r\n                other: true\r\n            }, {\r\n                regex: \"([A-Za-z0-9]+)\\\\_W\\\\;FOMA\",\r\n                device_replacement: \"DoCoMo $1\",\r\n                other: true\r\n            }, {\r\n                regex: \"([A-Za-z0-9]+)\\\\;FOMA\",\r\n                device_replacement: \"DoCoMo $1\",\r\n                other: true\r\n            }, {\r\n                regex: \"vodafone([A-Za-z0-9]+)\",\r\n                device_replacement: \"Huawei Vodafone $1\",\r\n                other: true\r\n            }, {\r\n                regex: \"i\\\\-mate ([A-Za-z0-9]+)\",\r\n                device_replacement: \"i-mate $1\",\r\n                other: true\r\n            }, {\r\n                regex: \"Kyocera\\\\-([A-Za-z0-9]+)\",\r\n                device_replacement: \"Kyocera $1\",\r\n                other: true\r\n            }, {\r\n                regex: \"KWC\\\\-([A-Za-z0-9]+)\",\r\n                device_replacement: \"Kyocera $1\",\r\n                other: true\r\n            }, {\r\n                regex: \"Lenovo\\\\-([A-Za-z0-9]+)\",\r\n                device_replacement: \"Lenovo $1\",\r\n                manufacturer: \"Lenovo\"\r\n            }, {\r\n                regex: \"Lenovo\\\\_([A-Za-z0-9]+)\",\r\n                device_replacement: \"Lenovo $1\",\r\n                manufacturer: \"Levovo\"\r\n            }, {\r\n                regex: \"LG/([A-Za-z0-9]+)\",\r\n                device_replacement: \"LG $1\",\r\n                manufacturer: \"LG\"\r\n            }, {\r\n                regex: \"LG-LG([A-Za-z0-9]+)\",\r\n                device_replacement: \"LG $1\",\r\n                manufacturer: \"LG\"\r\n            }, {\r\n                regex: \"LGE-LG([A-Za-z0-9]+)\",\r\n                device_replacement: \"LG $1\",\r\n                manufacturer: \"LG\"\r\n            }, {\r\n                regex: \"LGE VX([A-Za-z0-9]+)\",\r\n                device_replacement: \"LG $1\",\r\n                manufacturer: \"LG\"\r\n            }, {\r\n                regex: \"LG ([A-Za-z0-9]+)\",\r\n                device_replacement: \"LG $1\",\r\n                manufacturer: \"LG\"\r\n            }, {\r\n                regex: \"LGE LG\\\\-AX([A-Za-z0-9]+)\",\r\n                device_replacement: \"LG $1\",\r\n                manufacturer: \"LG\"\r\n            }, {\r\n                regex: \"LG\\\\-([A-Za-z0-9]+)\",\r\n                device_replacement: \"LG $1\",\r\n                manufacturer: \"LG\"\r\n            }, {\r\n                regex: \"LGE\\\\-([A-Za-z0-9]+)\",\r\n                device_replacement: \"LG $1\",\r\n                manufacturer: \"LG\"\r\n            }, {\r\n                regex: \"LG([A-Za-z0-9]+)\",\r\n                device_replacement: \"LG $1\",\r\n                manufacturer: \"LG\"\r\n            }, {\r\n                regex: \"(KIN)\\\\.One (\\\\d+)\\\\.(\\\\d+)\",\r\n                device_replacement: \"Microsoft $1\"\r\n            }, {\r\n                regex: \"(KIN)\\\\.Two (\\\\d+)\\\\.(\\\\d+)\",\r\n                device_replacement: \"Microsoft $1\"\r\n            }, {\r\n                regex: \"(Motorola)\\\\-([A-Za-z0-9]+)\",\r\n                manufacturer: \"Motorola\"\r\n            }, {\r\n                regex: \"MOTO\\\\-([A-Za-z0-9]+)\",\r\n                device_replacement: \"Motorola $1\",\r\n                manufacturer: \"Motorola\"\r\n            }, {\r\n                regex: \"MOT\\\\-([A-Za-z0-9]+)\",\r\n                device_replacement: \"Motorola $1\",\r\n                manufacturer: \"Motorola\"\r\n            }, {\r\n                regex: \"Philips([A-Za-z0-9]+)\",\r\n                device_replacement: \"Philips $1\",\r\n                manufacturer: \"Philips\"\r\n            }, {\r\n                regex: \"Philips ([A-Za-z0-9]+)\",\r\n                device_replacement: \"Philips $1\",\r\n                manufacturer: \"Philips\"\r\n            }, {\r\n                regex: \"SAMSUNG-([A-Za-z0-9\\\\-]+)\",\r\n                device_replacement: \"Samsung $1\",\r\n                manufacturer: \"Samsung\"\r\n            }, {\r\n                regex: \"SAMSUNG\\\\; ([A-Za-z0-9\\\\-]+)\",\r\n                device_replacement: \"Samsung $1\",\r\n                manufacturer: \"Samsung\"\r\n            }, {\r\n                regex: \"Softbank/1\\\\.0/([A-Za-z0-9]+)\",\r\n                device_replacement: \"Softbank $1\",\r\n                other: true\r\n            }, {\r\n                regex: \"Softbank/2\\\\.0/([A-Za-z0-9]+)\",\r\n                device_replacement: \"Softbank $1\",\r\n                other: true\r\n            }, {\r\n                regex: \"(hiptop|avantgo|plucker|xiino|blazer|elaine|up.browser|up.link|mmp|smartphone|midp|wap|vodafone|o2|pocket|mobile|pda)\",\r\n                device_replacement: \"Generic Smartphone\"\r\n            }, {\r\n                regex: \"^(1207|3gso|4thp|501i|502i|503i|504i|505i|506i|6310|6590|770s|802s|a wa|acer|acs\\\\-|airn|alav|asus|attw|au\\\\-m|aur |aus |abac|acoo|aiko|alco|alca|amoi|anex|anny|anyw|aptu|arch|argo|bell|bird|bw\\\\-n|bw\\\\-u|beck|benq|bilb|blac|c55/|cdm\\\\-|chtm|capi|comp|cond|craw|dall|dbte|dc\\\\-s|dica|ds\\\\-d|ds12|dait|devi|dmob|doco|dopo|el49|erk0|esl8|ez40|ez60|ez70|ezos|ezze|elai|emul|eric|ezwa|fake|fly\\\\-|fly\\\\_|g\\\\-mo|g1 u|g560|gf\\\\-5|grun|gene|go.w|good|grad|hcit|hd\\\\-m|hd\\\\-p|hd\\\\-t|hei\\\\-|hp i|hpip|hs\\\\-c|htc |htc\\\\-|htca|htcg)\",\r\n                device_replacement: \"Generic Feature Phone\"\r\n            }, {\r\n                regex: \"^(htcp|htcs|htct|htc\\\\_|haie|hita|huaw|hutc|i\\\\-20|i\\\\-go|i\\\\-ma|i230|iac|iac\\\\-|iac/|ig01|im1k|inno|iris|jata|java|kddi|kgt|kgt/|kpt |kwc\\\\-|klon|lexi|lg g|lg\\\\-a|lg\\\\-b|lg\\\\-c|lg\\\\-d|lg\\\\-f|lg\\\\-g|lg\\\\-k|lg\\\\-l|lg\\\\-m|lg\\\\-o|lg\\\\-p|lg\\\\-s|lg\\\\-t|lg\\\\-u|lg\\\\-w|lg/k|lg/l|lg/u|lg50|lg54|lge\\\\-|lge/|lynx|leno|m1\\\\-w|m3ga|m50/|maui|mc01|mc21|mcca|medi|meri|mio8|mioa|mo01|mo02|mode|modo|mot |mot\\\\-|mt50|mtp1|mtv |mate|maxo|merc|mits|mobi|motv|mozz|n100|n101|n102|n202|n203|n300|n302|n500|n502|n505|n700|n701|n710|nec\\\\-|nem\\\\-|newg|neon)\",\r\n                device_replacement: \"Generic Feature Phone\"\r\n            }, {\r\n                regex: \"^(netf|noki|nzph|o2 x|o2\\\\-x|opwv|owg1|opti|oran|ot\\\\-s|p800|pand|pg\\\\-1|pg\\\\-2|pg\\\\-3|pg\\\\-6|pg\\\\-8|pg\\\\-c|pg13|phil|pn\\\\-2|pt\\\\-g|palm|pana|pire|pock|pose|psio|qa\\\\-a|qc\\\\-2|qc\\\\-3|qc\\\\-5|qc\\\\-7|qc07|qc12|qc21|qc32|qc60|qci\\\\-|qwap|qtek|r380|r600|raks|rim9|rove|s55/|sage|sams|sc01|sch\\\\-|scp\\\\-|sdk/|se47|sec\\\\-|sec0|sec1|semc|sgh\\\\-|shar|sie\\\\-|sk\\\\-0|sl45|slid|smb3|smt5|sp01|sph\\\\-|spv |spv\\\\-|sy01|samm|sany|sava|scoo|send|siem|smar|smit|soft|sony|t\\\\-mo|t218|t250|t600|t610|t618|tcl\\\\-|tdg\\\\-|telm|tim\\\\-|ts70|tsm\\\\-|tsm3|tsm5|tx\\\\-9|tagt)\",\r\n                device_replacement: \"Generic Feature Phone\"\r\n            }, {\r\n                regex: \"^(talk|teli|topl|tosh|up.b|upg1|utst|v400|v750|veri|vk\\\\-v|vk40|vk50|vk52|vk53|vm40|vx98|virg|vite|voda|vulc|w3c |w3c\\\\-|wapj|wapp|wapu|wapm|wig |wapi|wapr|wapv|wapy|wapa|waps|wapt|winc|winw|wonu|x700|xda2|xdag|yas\\\\-|your|zte\\\\-|zeto|aste|audi|avan|blaz|brew|brvw|bumb|ccwa|cell|cldc|cmd\\\\-|dang|eml2|fetc|hipt|http|ibro|idea|ikom|ipaq|jbro|jemu|jigs|keji|kyoc|kyok|libw|m\\\\-cr|midp|mmef|moto|mwbp|mywa|newt|nok6|o2im|pant|pdxg|play|pluc|port|prox|rozo|sama|seri|smal|symb|treo|upsi|vx52|vx53|vx60|vx61|vx70|vx80|vx81|vx83|vx85|wap\\\\-|webc|whit|wmlb|xda\\\\-|xda\\\\_)\",\r\n                device_replacement: \"Generic Feature Phone\"\r\n            }, {\r\n                regex: \"(bot|borg|google(^tv)|yahoo|slurp|msnbot|msrbot|openbot|archiver|netresearch|lycos|scooter|altavista|teoma|gigabot|baiduspider|blitzbot|oegp|charlotte|furlbot|http%20client|polybot|htdig|ichiro|mogimogi|larbin|pompos|scrubby|searchsight|seekbot|semanticdiscovery|silk|snappy|speedy|spider|voila|vortex|voyager|zao|zeal|fast\\\\-webcrawler|converacrawler|dataparksearch|findlinks)\",\r\n                device_replacement: \"Spider\"\r\n            } ],\r\n            mobile_browser_families: [ \"Firefox Mobile\", \"Opera Mobile\", \"Opera Mini\", \"Mobile Safari\", \"webOS\", \"IE Mobile\", \"Playstation Portable\", \"Nokia\", \"Blackberry\", \"Palm\", \"Silk\", \"Android\", \"Maemo\", \"Obigo\", \"Netfront\", \"AvantGo\", \"Teleca\", \"SEMC-Browser\", \"Bolt\", \"Iris\", \"UP.Browser\", \"Symphony\", \"Minimo\", \"Bunjaloo\", \"Jasmine\", \"Dolfin\", \"Polaris\", \"BREW\", \"Chrome Mobile\", \"Chrome Mobile iOS\", \"UC Browser\", \"Tizen Browser\" ]\r\n        };\r\n        // Parsers\r\n        _this.parsers = [ \"device_parsers\", \"browser_parsers\", \"os_parsers\", \"mobile_os_families\", \"mobile_browser_families\" ];\r\n        // Types\r\n        _this.types = [ \"browser\", \"os\", \"device\" ];\r\n        // Regular Expressions\r\n        _this.regexes = regexes || function() {\r\n            var results = {};\r\n            _this.parsers.map(function(parser) {\r\n                results[parser] = [];\r\n            });\r\n            return results;\r\n        }();\r\n        // Families\r\n        _this.families = function() {\r\n            var results = {};\r\n            _this.types.map(function(type) {\r\n                results[type] = [];\r\n            });\r\n            return results;\r\n        }();\r\n        // Utility Variables\r\n        var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype, nativeForEach = ArrayProto.forEach, nativeIndexOf = ArrayProto.indexOf;\r\n        // Find Utility\r\n        var find = function(ua, obj) {\r\n            var ret = {};\r\n            for (var i = 0; i < obj.length; i++) {\r\n                ret = obj[i](ua);\r\n                if (ret) {\r\n                    break;\r\n                }\r\n            }\r\n            return ret;\r\n        };\r\n        // Remove Utility\r\n        var remove = function(arr, props) {\r\n            each(arr, function(obj) {\r\n                each(props, function(prop) {\r\n                    delete obj[prop];\r\n                });\r\n            });\r\n        };\r\n        // Contains Utility\r\n        var contains = function(obj, target) {\r\n            var found = false;\r\n            if (obj == null) return found;\r\n            if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\r\n            found = any( function(value) {\r\n                return value === target;\r\n            });\r\n            return found;\r\n        };\r\n        // Each Utility\r\n        var each = forEach = function(obj, iterator, context) {\r\n            if (obj == null) return;\r\n            if (nativeForEach && obj.forEach === nativeForEach) {\r\n                obj.forEach(iterator, context);\r\n            } else if (obj.length === +obj.length) {\r\n                for (var i = 0, l = obj.length; i < l; i++) {\r\n                    iterator.call(context, obj[i], i, obj);\r\n                }\r\n            } else {\r\n                for (var key in obj) {\r\n                    if (_.has(obj, key)) {\r\n                        iterator.call(context, obj[key], key, obj);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        // Extend Utiltiy\r\n        var extend = function(obj) {\r\n            each(slice.call(arguments, 1), function(source) {\r\n                for (var prop in source) {\r\n                    obj[prop] = source[prop];\r\n                }\r\n            });\r\n            return obj;\r\n        };\r\n        // Check String Utility\r\n        var check = function(str) {\r\n            return !!(str && typeof str != \"undefined\" && str != null);\r\n        };\r\n        // To Version String Utility\r\n        var toVersionString = function(obj) {\r\n            var output = \"\";\r\n            obj = obj || {};\r\n            if (check(obj)) {\r\n                if (check(obj.major)) {\r\n                    output += obj.major;\r\n                    if (check(obj.minor)) {\r\n                        output += \".\" + obj.minor;\r\n                        if (check(obj.patch)) {\r\n                            output += \".\" + obj.patch;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return output;\r\n        };\r\n        // To String Utility\r\n        var toString = function(obj) {\r\n            obj = obj || {};\r\n            var suffix = toVersionString(obj);\r\n            if (suffix) suffix = \" \" + suffix;\r\n            return obj && check(obj.family) ? obj.family + suffix : \"\";\r\n        };\r\n        // Parse User-Agent String\r\n        _this.parse = function(ua) {\r\n            // Parsers Utility\r\n            var parsers = function(type) {\r\n                return _this.regexes[type + \"_parsers\"].map(function(obj) {\r\n                    var regexp = new RegExp(obj.regex), rep = obj[(type === \"browser\" ? \"family\" : type) + \"_replacement\"], major_rep = obj.major_version_replacement;\r\n                    function parser(ua) {\r\n                        var m = ua.match(regexp);\r\n                        if (!m) return null;\r\n                        var ret = {};\r\n                        ret.family = (rep ? rep.replace(\"$1\", m[1]) : m[1]) || \"other\";\r\n                        ret.major = parseInt(major_rep ? major_rep : m[2]) || null;\r\n                        ret.minor = m[3] ? parseInt(m[3]) : null;\r\n                        ret.patch = m[4] ? parseInt(m[4]) : null;\r\n                        ret.tablet = obj.tablet;\r\n                        ret.man = obj.manufacturer || null;\r\n                        return ret;\r\n                    }\r\n                    return parser;\r\n                });\r\n            };\r\n            // User Agent\r\n            var UserAgent = function() {};\r\n            // Browsers Parsed\r\n            var browser_parsers = parsers(\"browser\");\r\n            // Operating Systems Parsed\r\n            var os_parsers = parsers(\"os\");\r\n            // Devices Parsed\r\n            var device_parsers = parsers(\"device\");\r\n            // Set Agent\r\n            var a = new UserAgent();\r\n            // Remember the original user agent string\r\n            a.source = ua;\r\n            // Set Browser\r\n            a.browser = find(ua, browser_parsers);\r\n            if (check(a.browser)) {\r\n                a.browser.name = toString(a.browser);\r\n                a.browser.version = toVersionString(a.browser);\r\n            } else {\r\n                a.browser = {};\r\n            }\r\n            // Set OS\r\n            a.os = find(ua, os_parsers);\r\n            if (check(a.os)) {\r\n                a.os.name = toString(a.os);\r\n                a.os.version = toVersionString(a.os);\r\n            } else {\r\n                a.os = {};\r\n            }\r\n            // Set Device\r\n            a.device = find(ua, device_parsers);\r\n            if (check(a.device)) {\r\n                a.device.name = toString(a.device);\r\n                a.device.version = toVersionString(a.device);\r\n            } else {\r\n                a.device = {\r\n                    tablet: false,\r\n                    family: \"Other\"\r\n                };\r\n            }\r\n            // Determine Device Type\r\n            var mobile_agents = {};\r\n            var mobile_browser_families = _this.regexes.mobile_browser_families.map(function(str) {\r\n                mobile_agents[str] = true;\r\n            });\r\n            var mobile_os_families = _this.regexes.mobile_os_families.map(function(str) {\r\n                mobile_agents[str] = true;\r\n            });\r\n            // Is Spider\r\n            if (a.browser.family === \"Spider\") {\r\n                a.device.type = \"Spider\";\r\n            } else if (a.browser.tablet || a.os.tablet || a.device.tablet) {\r\n                a.device.type = \"Tablet\";\r\n            } else if (mobile_agents.hasOwnProperty(a.browser.family)) {\r\n                a.device.type = \"Mobile\";\r\n            } else {\r\n                a.device.type = \"Desktop\";\r\n            }\r\n            // Determine Device Manufacturer\r\n            a.device.manufacturer = a.browser.man || a.os.man || a.device.man || null;\r\n            // Cleanup Objects\r\n            remove([ a.browser, a.os, a.device ], [ \"tablet\", \"man\" ]);\r\n            // Return Agent\r\n            return a;\r\n        };\r\n        // Return context\r\n        return _this;\r\n    }();\r\n    // Export the Underscore object for **Node.js** and **\"CommonJS\"**,\r\n    // backwards-compatibility for the old `require()` API. If we're not\r\n    // CommonJS, add `_` to the global object via a string identifier\r\n    // the Closure Compiler \"advanced\" mode. Registration as an AMD\r\n    // via define() happens at the end of this file\r\n    if (typeof exports !== \"undefined\") {\r\n        if (typeof module !== \"undefined\" && module.exports) {\r\n            exports = module.exports = detect;\r\n        }\r\n        exports.detect = detect;\r\n    } else {\r\n        root[\"detect\"] = detect;\r\n    }\r\n    // AMD define happens at the end for compatibility with AMD\r\n    // that don't enforce next-turn semantics on modules\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(function(require) {\r\n            return detect;\r\n        });\r\n    }\r\n})(window);"]},"metadata":{},"sourceType":"module"}